# Query: ASTColor|RgbValue|AnsiValue|REFACTOR
# Flags: CaseSensitive WordMatch RegExp
# ContextLines: 1

635 results - 27 files

CHANGELOG.md:
   514      example for `r3bl_tui` which uses this
   515:     `let msg_fmt = fg_rgb_color(ASTColor::from(tui_color!(lizard_green)), &msg);`. Also `r3bl_ansi_color`
   516      has an equivalent macro to this called `rgb_color!`.

  1704      `r3bl_rs_utils` repo workspace as `simple_logger`).
  1705:   - `TuiColor` has a few new variants. They can be `RgbValue`, `AnsiValue`, or `ANSIBasicColor`. It
  1706:     is safe to use just `RgbValue` since the library will degrade gracefully to ANSI 256 or
  1707      grayscale based on terminal emulator capabilities at runtime (provided by `to_crossterm_color()`
  1708:     and `ColorSupport`). If a color is specified as `AnsiValue` or `ANSIBasicColor` then it will not
  1709      be downgraded.

  1771  - Changed:
  1772:   - `Color` is now `ASTColor`.
  1773    - `Style` is now `ASTStyle`.
  1774:   - Proper converters `From` implementations are provided to convert between `ASTColor`
  1775      and `RGBColor`, and `Ansi256Color`.

cmdr/src/color_constants.rs:
  17  
  18: use r3bl_core::ASTColor;
  19  

  31  impl DefaultColors {
  32:     pub fn as_ansi_color(&self) -> ASTColor {
  33          match self {
  34:             DefaultColors::LizardGreen => ASTColor::Rgb((20, 244, 0).into()),
  35:             DefaultColors::SlateGrey => ASTColor::Rgb((94, 103, 111).into()),
  36:             DefaultColors::SilverMetallic => ASTColor::Rgb((213, 217, 220).into()),
  37:             DefaultColors::FrozenBlue => ASTColor::Rgb((171, 204, 242).into()),
  38:             DefaultColors::MoonlightBlue => ASTColor::Rgb((31, 36, 46).into()),
  39:             DefaultColors::NightBlue => ASTColor::Rgb((14, 17, 23).into()),
  40:             DefaultColors::GuardsRed => ASTColor::Rgb((200, 1, 1).into()),
  41:             DefaultColors::Orange => ASTColor::Rgb((255, 132, 18).into()),
  42          }

cmdr/src/giti/branch/giti_ui_templates.rs:
  19  
  20: use r3bl_core::{ASTColor,
  21                  ASTStyle,

  41              ASTStyle::Foreground(SLATE_GRAY),
  42:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  43          ],

  49              ASTStyle::Foreground(SLATE_GRAY),
  50:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  51          ],

  57              ASTStyle::Foreground(SLATE_GRAY),
  58:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  59          ],

  65              ASTStyle::Foreground(SLATE_GRAY),
  66:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  67          ],

  77              ASTStyle::Foreground(SLATE_GRAY),
  78:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  79          ],

  84              ASTStyle::Foreground(SLATE_GRAY),
  85:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  86          ],

  92              ASTStyle::Foreground(SLATE_GRAY),
  93:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  94          ],

core/src/ansi/ansi_styled_text.rs:
   23  
   24: use crate::{ASTColor,
   25              DEFAULT_STRING_STORAGE_SIZE,
   26              InlineVecASTStyles,
   27:             RgbValue,
   28              SgrCode};

   44  /// use r3bl_core::{
   45: ///     red, rgb_color, dim, AnsiStyledText, fg_rgb_color, ASTStyle, ASTColor
   46  /// };

   71  ///         ASTStyle::Underline,
   72: ///         ASTStyle::Foreground(ASTColor::Rgb(50, 50, 50)),
   73: ///         ASTStyle::Background(ASTColor::Rgb(100, 200, 1)),
   74  ///     ],

  103  
  104: pub fn fg_rgb_color(arg_color: impl Into<RgbValue>, text: &str) -> AnsiStyledText<'_> {
  105      let rgb_color = arg_color.into();
  106:     let ast_color = ASTColor::from(rgb_color);
  107      AnsiStyledText {

  116          text,
  117:         style: smallvec!(ASTStyle::Foreground(ASTColor::Ansi(34.into()))),
  118      }

  124          text,
  125:         style: smallvec!(ASTStyle::Foreground(ASTColor::Ansi(196.into()))),
  126      }

  132          text,
  133:         style: smallvec!(ASTStyle::Foreground(ASTColor::Ansi(231.into()))),
  134      }

  140          text,
  141:         style: smallvec!(ASTStyle::Foreground(ASTColor::Ansi(51.into()))),
  142      }

  148          text,
  149:         style: smallvec!(ASTStyle::Foreground(ASTColor::Ansi(226.into()))),
  150      }

  156          text,
  157:         style: smallvec!(ASTStyle::Foreground(ASTColor::Ansi(201.into()))),
  158      }

  199          text,
  200:         style: smallvec!(ASTStyle::Foreground(ASTColor::Ansi(27.into()))),
  201      }

  248          self.style
  249:             .push(ASTStyle::Background(ASTColor::Ansi(236.into())));
  250          self

  252  
  253:     pub fn bg_rgb_color(mut self, arg_color: impl Into<RgbValue>) -> Self {
  254          let color = arg_color.into();
  255:         let ast_color = ASTColor::from(color);
  256          self.style.push(ASTStyle::Background(ast_color));

  259  
  260:     pub fn fg_rgb_color(mut self, arg_color: impl Into<RgbValue>) -> Self {
  261          let color = arg_color.into();
  262:         let ast_color = ASTColor::from(color);
  263          self.style.push(ASTStyle::Foreground(ast_color));

  269  pub enum ASTStyle {
  270:     Foreground(ASTColor),
  271:     Background(ASTColor),
  272      Bold,

  286  
  287:     use crate::{ASTColor,
  288                  ASTStyle,
  289                  ColorSupport,
  290:                 RgbValue,
  291                  SgrCode,

  301      fn fmt_color(
  302:         color: ASTColor,
  303          color_kind: ColorKind,

  337                  let color = color.as_rgb();
  338:                 let RgbValue { red, green, blue } = color;
  339                  write!(

  393      use super::dim;
  394:     use crate::{ASTColor, ASTStyle, AnsiStyledText, ColorSupport, global_color_support};
  395  

  402                  ASTStyle::Bold,
  403:                 ASTStyle::Foreground(ASTColor::Rgb((0, 0, 0).into())),
  404              ),

  441                  ASTStyle::Bold,
  442:                 ASTStyle::Foreground(ASTColor::Rgb((0, 0, 0).into())),
  443:                 ASTStyle::Background(ASTColor::Rgb((1, 1, 1).into())),
  444              ),

  455                  ASTStyle::Bold,
  456:                 ASTStyle::Foreground(ASTColor::Ansi(150.into())),
  457:                 ASTStyle::Background(ASTColor::Rgb((1, 1, 1).into())),
  458              ),

  476                  ASTStyle::Bold,
  477:                 ASTStyle::Foreground(ASTColor::Rgb((0, 0, 0).into())),
  478:                 ASTStyle::Background(ASTColor::Rgb((1, 1, 1).into())),
  479              ),

  490                  ASTStyle::Bold,
  491:                 ASTStyle::Foreground(ASTColor::Ansi(150.into())),
  492:                 ASTStyle::Background(ASTColor::Rgb((1, 1, 1).into())),
  493              ),

  511                  ASTStyle::Bold,
  512:                 ASTStyle::Foreground(ASTColor::Rgb((0, 0, 0).into())),
  513:                 ASTStyle::Background(ASTColor::Rgb((1, 1, 1).into())),
  514              ),

  527                  ASTStyle::Bold,
  528:                 ASTStyle::Foreground(ASTColor::Ansi(150.into())),
  529:                 ASTStyle::Background(ASTColor::Rgb((1, 1, 1).into())),
  530              ),

core/src/ansi/ast_color.rs:
  27  
  28: use crate::{AnsiValue,
  29:             RgbValue,
  30              TransformColor,

  40  #[derive(Debug, Clone, Copy, PartialEq, Eq)]
  41: pub enum ASTColor {
  42:     Rgb(RgbValue),
  43:     Ansi(AnsiValue),
  44  }

  48  
  49:     impl Default for ASTColor {
  50:         fn default() -> Self { ASTColor::Rgb((0, 0, 0).into()) }
  51      }
  52  
  53:     impl From<AnsiValue> for ASTColor {
  54:         fn from(ansi: AnsiValue) -> Self { ASTColor::Ansi(ansi) }
  55      }
  56  
  57:     impl From<ASTColor> for RgbValue {
  58:         fn from(ast_color: ASTColor) -> Self { ast_color.as_rgb() }
  59      }
  60  
  61:     impl From<RgbValue> for ASTColor {
  62:         fn from(rgb_value: RgbValue) -> Self { ASTColor::Rgb(rgb_value) }
  63      }
  64  
  65:     impl TransformColor for ASTColor {
  66:         fn as_rgb(&self) -> RgbValue {
  67              match self {
  68:                 ASTColor::Rgb(rgb_value) => *rgb_value,
  69:                 ASTColor::Ansi(ansi_value) => {
  70:                     let rgb_color: RgbValue =
  71                          ANSI_COLOR_PALETTE[ansi_value.index as usize].into();

  76  
  77:         fn as_ansi(&self) -> AnsiValue {
  78              match self {
  79:                 ASTColor::Rgb(rgb_value) => convert_rgb_into_ansi256(RgbValue {
  80                      red: rgb_value.red,

  83                  }),
  84:                 ASTColor::Ansi(ansi_value) => *ansi_value,
  85              }

  87  
  88:         fn as_grayscale(&self) -> AnsiValue {
  89              match self {
  90:                 ASTColor::Rgb(rgb_value) => convert_rgb_into_ansi256(RgbValue {
  91                      red: rgb_value.red,

  95                  .as_grayscale(),
  96:                 ASTColor::Ansi(ansi) => {
  97                      let ansi = *ansi;

core/src/ansi/convert.rs:
   23  
   24: use crate::{AnsiValue, RgbValue};
   25  

   66  
   67: pub fn convert_rgb_into_ansi256(rgb_color: RgbValue) -> AnsiValue {
   68      let luminance_approximation: usize = calculate_luminance(rgb_color).into();

   73          let rgb_value_encoded_in_u32: u32 = ANSI_COLOR_PALETTE[gray_ansi256_index];
   74:         let gray_color = RgbValue::from(rgb_value_encoded_in_u32);
   75          calculate_relative_diff_between_colors(rgb_color, gray_color)

   94  mod cube_mapping {
   95:     use crate::RgbValue;
   96  

   99          pub cube_ansi256_index: u8,
  100:         pub cube_rgb_color: RgbValue,
  101      }

  103      pub fn calculate_cube_mapping_for_rgb_color(
  104:         rgb_color: RgbValue,
  105      ) -> CubeMappingResult {
  106:         let RgbValue { red, green, blue } = rgb_color;
  107  

  115  
  116:         let cube_rgb_color: RgbValue = {
  117              let cube_rgb_value_u32_encoded = red_result.red_or_green_or_blue_value

  194      /// More info: <https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_Colors_and_Luminance#luminance_and_perception>.
  195:     pub fn calculate_luminance(rgb: RgbValue) -> u8 {
  196:         let RgbValue { red, green, blue } = rgb;
  197          let number = red as f32 * red as f32 * 0.2126729_f32

  207      pub fn calculate_relative_diff_between_colors(
  208:         this: RgbValue,
  209:         other: RgbValue,
  210      ) -> u32 {
  211:         let RgbValue {
  212              red: this_red,

  216  
  217:         let RgbValue {
  218              red: other_red,

  235  mod convert_between_rgb_and_u32 {
  236:     use crate::RgbValue;
  237  
  238:     impl From<RgbValue> for u32 {
  239:         fn from(rgb: RgbValue) -> Self {
  240:             let RgbValue {
  241                  red: r,

  248  
  249:     impl From<u32> for RgbValue {
  250          fn from(rgb: u32) -> Self {
  251:             RgbValue {
  252                  red: (rgb >> 16) as u8,

  282      /// -  `u32` value encodes R (u8), G (u8), B(u8).
  283:     /// - [RgbValue::from](crate::RgbValue::from) can be used to convert `u32` into
  284:     ///   `RgbValue`.
  285      pub static ANSI_COLOR_PALETTE: [u32; 256] = [

  328  
  329:     use crate::{AnsiValue, RgbValue, TransformColor};
  330  

  333          assert_eq!(
  334:             AnsiValue { index: 0 }.as_rgb(),
  335:             RgbValue {
  336                  red: 0,

  342          assert_eq!(
  343:             AnsiValue { index: 25 }.as_rgb(),
  344:             RgbValue {
  345                  red: 0,

  351          assert_eq!(
  352:             AnsiValue { index: 50 }.as_rgb(),
  353:             RgbValue {
  354                  red: 0,

  360          assert_eq!(
  361:             AnsiValue { index: 100 }.as_rgb(),
  362:             RgbValue {
  363                  red: 135,

  369          assert_eq!(
  370:             AnsiValue { index: 200 }.as_rgb(),
  371:             RgbValue {
  372                  red: 255,

  378          assert_eq!(
  379:             AnsiValue { index: 225 }.as_rgb(),
  380:             RgbValue {
  381                  red: 255,

  387          assert_eq!(
  388:             AnsiValue { index: 255 }.as_rgb(),
  389:             RgbValue {
  390                  red: 238,

  401          assert_eq!(
  402:             RgbValue {
  403                  red: 0,

  412          assert_eq!(
  413:             RgbValue {
  414                  red: 1,

  423          assert_eq!(
  424:             RgbValue {
  425                  red: 25,

  434          assert_eq!(
  435:             RgbValue {
  436                  red: 10,

  445          assert_eq!(
  446:             RgbValue {
  447                  red: 50,

  456          assert_eq!(
  457:             RgbValue {
  458                  red: 255,

core/src/ansi/mod.rs:
  143  //! use r3bl_core::{
  144: //!     red, dim, fg_rgb_color, RgbColor, ASTStyle, AnsiStyledText, ASTColor
  145  //! };

  170  //!         ASTStyle::Underline,
  171: //!         ASTStyle::Foreground(ASTColor::Rgb(50, 50, 50)),
  172: //!         ASTStyle::Background(ASTColor::Rgb(100, 200, 1)),
  173  //!     ],

core/src/ansi/transform_color.rs:
  17  
  18: use crate::{AnsiValue, RgbValue};
  19  
  20  pub trait TransformColor {
  21:     /// Returns a [RgbValue] representation of the `self` color.
  22:     fn as_rgb(&self) -> RgbValue;
  23  

  25      /// color.
  26:     fn as_ansi(&self) -> AnsiValue;
  27  

  29      /// color as grayscale.
  30:     fn as_grayscale(&self) -> AnsiValue;
  31  }

  37      use super::TransformColor;
  38:     use crate::{ASTColor, AnsiValue, RgbValue};
  39  

  43      fn test_color_as_rgb(red: u8, green: u8, blue: u8) {
  44:         let rgb_color = ASTColor::Rgb((red, green, blue).into());
  45:         assert_eq!(rgb_color.as_rgb(), RgbValue { red, green, blue });
  46      }
  47  
  48:     #[test_case(ASTColor::Rgb((255, 255, 255).into()), 231)]
  49:     #[test_case(ASTColor::Rgb((255, 128, 0).into()), 208)]
  50:     fn test_color_as_ansi256(rgb_color: crate::ASTColor, index: u8) {
  51:         let expected_ansi = AnsiValue { index };
  52          assert_eq!(rgb_color.as_ansi(), expected_ansi);

  54  
  55:     #[test_case(RgbValue{red: 0, green: 0, blue: 0})]
  56:     #[test_case(RgbValue{red: 0, green: 128, blue: 255})]
  57:     #[test_case(RgbValue{red: 255, green: 255, blue: 255})]
  58:     fn test_rgb_color_as_rgb(rgb_color: RgbValue) {
  59          assert_eq!(rgb_color.as_rgb(), rgb_color);

  61  
  62:     #[test_case(AnsiValue{index: 42}, RgbValue{red: 0, green: 215, blue: 135})]
  63:     fn test_ansi256_color_as_rgb(ansi_color: AnsiValue, rgb_color: RgbValue) {
  64          assert_eq!(ansi_color.as_rgb(), rgb_color);

  66  
  67:     #[test_case(RgbValue{red: 0, green: 0, blue: 0}, 16)]
  68:     #[test_case(RgbValue{red: 0, green: 128, blue: 255}, 33)]
  69:     fn test_rgb_color_as_ansi256(rgb_color: RgbValue, index: u8) {
  70:         let expected_ansi = AnsiValue { index };
  71          assert_eq!(rgb_color.as_ansi(), expected_ansi);

  73  
  74:     #[test_case(ASTColor::Rgb((0, 0, 0).into()), 16)]
  75:     #[test_case(ASTColor::Rgb((255, 128, 0).into()), 249)]
  76:     fn test_color_as_grayscale(rgb_color: crate::ASTColor, index: u8) {
  77:         let expected_gray = AnsiValue { index };
  78          assert_eq!(rgb_color.as_grayscale(), expected_gray);

  80  
  81:     #[test_case(RgbValue{red: 0, green: 128, blue: 255}, 245)]
  82:     #[test_case(RgbValue{red: 128, green: 128, blue: 128}, 244)]
  83:     fn test_rgb_color_as_grayscale(rgb_color: RgbValue, index: u8) {
  84:         let expected_gray = AnsiValue { index };
  85          assert_eq!(rgb_color.as_grayscale(), expected_gray);

  87  
  88:     #[test_case(RgbValue{red: 0, green: 0, blue: 0}, 16)]
  89:     #[test_case(RgbValue{red: 0, green: 128, blue: 255}, 33)]
  90:     fn test_ansi256_color_as_ansi256(rgb_color: RgbValue, index: u8) {
  91:         let expected_ansi = AnsiValue { index };
  92          assert_eq!(rgb_color.as_ansi(), expected_ansi);

  94  
  95:     #[test_case(RgbValue{red: 0, green: 128, blue: 255}, 245)]
  96:     #[test_case(RgbValue{red: 255, green: 255, blue: 255}, 231)]
  97:     fn test_ansi256_color_as_grayscale(rgb_color: RgbValue, index: u8) {
  98:         let expected_gray = AnsiValue { index };
  99          assert_eq!(rgb_color.as_grayscale(), expected_gray);

core/src/misc/string_helpers.rs:
  31  fn test_contains_ansi_escape_sequence() {
  32:     use crate::{ASTColor, ASTStyle, AnsiStyledText, assert_eq2};
  33  

  50                        ASTStyle::Underline,
  51:                       ASTStyle::Foreground(ASTColor::Rgb((50, 50, 50).into())),
  52:                       ASTStyle::Background(ASTColor::Rgb((100, 200, 1).into())),
  53                    ],

core/src/tui_core/color_wheel/color_wheel_impl.rs:
   37              InlineString,
   38:             RgbValue,
   39              TextColorizationPolicy,

  217                      for color_u8 in gradient_array {
  218:                         // gradient_vec.push(TuiColor::Ansi(AnsiValue::new(*color_u8)));
  219                          gradient_vec.push(tui_color!(ansi * color_u8));

  490                      let maybe_bg_color = match next_bg_color {
  491:                         TuiColor::Rgb(RgbValue {
  492                              red: bg_red,

  496                          TuiColor::Ansi(ansi_value) => {
  497:                             let rgb_value = RgbValue::from(ansi_value);
  498                              Some((rgb_value.red, rgb_value.green, rgb_value.blue))

  500                          TuiColor::Basic(basic_color) => {
  501:                             match RgbValue::try_from_tui_color(TuiColor::Basic(
  502                                  basic_color,
  503                              )) {
  504:                                 Ok(RgbValue { red, green, blue }) => {
  505                                      Some((red, green, blue))

core/src/tui_core/color_wheel_core/converter.rs:
  17  
  18: use crate::{ANSIBasicColor, ASTColor, RgbValue, TuiColor};
  19  
  20  #[rustfmt::skip]
  21: pub fn convert_tui_color_into_r3bl_ansi_color(color: TuiColor) -> ASTColor {
  22      match color {
  23:         TuiColor::Reset => ASTColor::default(),
  24          TuiColor::Basic(basic_color) => match basic_color {
  25:             ANSIBasicColor::Black       => ASTColor::Rgb((0, 0, 0).into()),
  26:             ANSIBasicColor::White       => ASTColor::Rgb((255, 255, 255).into()),
  27:             ANSIBasicColor::Grey        => ASTColor::Rgb((128, 128, 128).into()),
  28:             ANSIBasicColor::DarkGrey    => ASTColor::Rgb((64, 64, 64).into()),
  29:             ANSIBasicColor::Red         => ASTColor::Rgb((255, 0, 0).into()),
  30:             ANSIBasicColor::DarkRed     => ASTColor::Rgb((128, 0, 0).into()),
  31:             ANSIBasicColor::Green       => ASTColor::Rgb((0, 255, 0).into()),
  32:             ANSIBasicColor::DarkGreen   => ASTColor::Rgb((0, 128, 0).into()),
  33:             ANSIBasicColor::Yellow      => ASTColor::Rgb((255, 255, 0).into()),
  34:             ANSIBasicColor::DarkYellow  => ASTColor::Rgb((128, 128, 0).into()),
  35:             ANSIBasicColor::Blue        => ASTColor::Rgb((0, 0, 255).into()),
  36:             ANSIBasicColor::DarkBlue    => ASTColor::Rgb((0, 0, 128).into()),
  37:             ANSIBasicColor::Magenta     => ASTColor::Rgb((255, 0, 255).into()),
  38:             ANSIBasicColor::DarkMagenta => ASTColor::Rgb((128, 0, 128).into()),
  39:             ANSIBasicColor::Cyan        => ASTColor::Rgb((0, 255, 255).into()),
  40:             ANSIBasicColor::DarkCyan    => ASTColor::Rgb((0, 128, 128).into()),
  41          },
  42:         TuiColor::Ansi(ansi_value) => ASTColor::Ansi(ansi_value),
  43:         TuiColor::Rgb(RgbValue { red, green, blue }) => {
  44:             ASTColor::Rgb((red, green, blue).into())
  45          },

  56          let tui_color = tui_color!(255, 0, 0);
  57:         let expected_color = ASTColor::Rgb((255, 0, 0).into());
  58          let converted_color = convert_tui_color_into_r3bl_ansi_color(tui_color);

  64          let tui_color = tui_color!(ansi 42);
  65:         let expected_color = ASTColor::Ansi(42.into());
  66          let converted_color = convert_tui_color_into_r3bl_ansi_color(tui_color);

  72          let tui_color = tui_color!(red);
  73:         let expected_color = ASTColor::Rgb((255, 0, 0).into());
  74          let converted_color = convert_tui_color_into_r3bl_ansi_color(tui_color);

  80          let tui_color = tui_color!(reset);
  81:         let expected_color = ASTColor::Rgb((0, 0, 0).into());
  82          let converted_color = convert_tui_color_into_r3bl_ansi_color(tui_color);

core/src/tui_core/color_wheel_core/truecolor_gradient.rs:
  133                          style: smallvec::smallvec![ASTStyle::Background(
  134:                             crate::ASTColor::Rgb((c.red, c.green, c.blue).into())
  135                          )],

  178                          style: smallvec::smallvec![ASTStyle::Background(
  179:                             crate::ASTColor::Rgb((c.red, c.green, c.blue).into())
  180                          )],

core/src/tui_core/tui_style/crossterm_color_converter.rs:
   18  use crate::{ANSIBasicColor,
   19:             ASTColor,
   20:             AnsiValue,
   21              ColorSupport,
   22:             RgbValue,
   23              TransformColor,

   49          // RGB colors.
   50:         crossterm::style::Color::Rgb { r, g, b } => TuiColor::Rgb(RgbValue {
   51              red: r,

   56          // ANSI colors.
   57:         crossterm::style::Color::AnsiValue(number) => {
   58:             TuiColor::Ansi(AnsiValue::new(number))
   59          }

  118                  ColorSupport::Truecolor | ColorSupport::Ansi256 => {
  119:                     crossterm::style::Color::AnsiValue(ansi.index)
  120                  }

  123                  ColorSupport::Grayscale | ColorSupport::NoColor => {
  124:                     let ansi_grayscale_color = ASTColor::Ansi(ansi).as_grayscale();
  125:                     crossterm::style::Color::AnsiValue(ansi_grayscale_color.index)
  126                  }

  131          TuiColor::Rgb(from_rgb_value) => {
  132:             let RgbValue {
  133                  red: r,

  143                  ColorSupport::Ansi256 => {
  144:                     let ansi_value = AnsiValue::from(from_rgb_value).index;
  145:                     crossterm::style::Color::AnsiValue(ansi_value)
  146                  }

  157  fn convert_rgb_to_ansi_grayscale(r: u8, g: u8, b: u8) -> crossterm::style::Color {
  158:     let ansi = ASTColor::Rgb((r, g, b).into()).as_grayscale();
  159:     crossterm::style::Color::AnsiValue(ansi.index)
  160  }

core/src/tui_core/tui_style/hex_color_parser.rs:
   17  
   18: //! This module contains a parser that parses a hex color string into a [RgbValue] struct.
   19  //! The hex color string can be in the following format: `#RRGGBB`, eg: `#FF0000` for red.

   29  
   30: use crate::RgbValue;
   31  
   32: /// Parse function that generate an [RgbValue] struct from a valid hex color string.
   33: pub fn parse_hex_color(input: &str) -> IResult<&str, RgbValue> {
   34      // This tuple contains 3 ways to do the same thing.

   44      let (input, (red, green, blue)) = tuple(it)(input)?; // same as `it.parse(input)?`
   45:     Ok((input, RgbValue { red, green, blue }))
   46  }

  100          assert_eq!(remainder, "🔅");
  101:         assert_eq!(color, RgbValue::from_u8(47, 20, 223));
  102      }

core/src/tui_core/tui_style/tui_color.rs:
   21  use crate::{ANSI_COLOR_PALETTE,
   22:             ASTColor,
   23              TransformColor,

   31      (lizard_green) => {
   32:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8(20, 244, 0))
   33      };

   35      (slate_grey) => {
   36:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8(94, 103, 111))
   37      };

   39      (silver_metallic) => {
   40:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8(213, 217, 220))
   41      };

   43      (frozen_blue) => {
   44:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8(171, 204, 242))
   45      };

   47      (moonlight_blue) => {
   48:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8(31, 36, 46))
   49      };

   51      (night_blue) => {
   52:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8(14, 17, 23))
   53      };

   55      (guards_red) => {
   56:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8(200, 1, 1))
   57      };

   59      (orange) => {
   60:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8(255, 132, 18))
   61      };

  133      ) => {
  134:         $crate::TuiColor::Rgb($crate::RgbValue::from_hex($arg_hex))
  135      };

  139      ) => {
  140:         $crate::TuiColor::Ansi($crate::AnsiValue::new($arg_value))
  141      };

  148      ) => {
  149:         $crate::TuiColor::Rgb($crate::RgbValue::from_u8($arg_r, $arg_g, $arg_b))
  150      };

  155  ///
  156: /// A [TuiColor] can be `RgbValue`, `AnsiValue`, or `ANSIBasicColor`.
  157: /// - It is safe to use just `RgbValue` since the library will degrade gracefully to ANSI
  158  ///   256 or grayscale based on terminal emulator capabilities at runtime, which are

  162  ///   [`ColorSupport`](https://docs.rs/r3bl_tui/latest/r3bl_tui/tui/color_wheel/detect_color_support/enum.ColorSupport.html).
  163: /// - If a color is specified as `AnsiValue` or `ANSIBasicColor` then it will not be
  164  ///   downgraded.

  175      /// notes](enum.Color.html#platform-specific-notes) for more info.
  176:     Rgb(RgbValue),
  177      /// An ANSI color. See [256 colors - cheat sheet](https://jonasjacek.github.io/colors/) for more

  181      /// notes](enum.Color.html#platform-specific-notes) for more info.
  182:     Ansi(AnsiValue),
  183  }

  236  #[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]
  237: pub struct RgbValue {
  238      pub red: u8,

  245  
  246:     impl From<(u8, u8, u8)> for RgbValue {
  247          fn from((red, green, blue): (u8, u8, u8)) -> Self {

  251  
  252:     impl RgbValue {
  253          pub fn from_u8(red: u8, green: u8, blue: u8) -> Self { Self { red, green, blue } }

  262  
  263:         pub fn try_from_hex_color(input: &str) -> CommonResult<RgbValue> {
  264              match parse_hex_color(input) {

  271  
  272:         pub fn from_hex(input: &str) -> RgbValue {
  273              match parse_hex_color(input) {

  289                          // ANSI values.
  290:                         ANSIBasicColor::Black => Ok(RgbValue {
  291                              red: 0,

  294                          }),
  295:                         ANSIBasicColor::White => Ok(RgbValue {
  296                              red: 255,

  299                          }),
  300:                         ANSIBasicColor::Grey => Ok(RgbValue {
  301                              red: 128,

  304                          }),
  305:                         ANSIBasicColor::Red => Ok(RgbValue {
  306                              red: 255,

  309                          }),
  310:                         ANSIBasicColor::Green => Ok(RgbValue {
  311                              red: 0,

  314                          }),
  315:                         ANSIBasicColor::Blue => Ok(RgbValue {
  316                              red: 0,

  319                          }),
  320:                         ANSIBasicColor::Yellow => Ok(RgbValue {
  321                              red: 255,

  324                          }),
  325:                         ANSIBasicColor::Cyan => Ok(RgbValue {
  326                              red: 0,

  329                          }),
  330:                         ANSIBasicColor::Magenta => Ok(RgbValue {
  331                              red: 255,

  334                          }),
  335:                         ANSIBasicColor::DarkGrey => Ok(RgbValue {
  336                              red: 64,

  339                          }),
  340:                         ANSIBasicColor::DarkRed => Ok(RgbValue {
  341                              red: 128,

  344                          }),
  345:                         ANSIBasicColor::DarkGreen => Ok(RgbValue {
  346                              red: 0,

  349                          }),
  350:                         ANSIBasicColor::DarkBlue => Ok(RgbValue {
  351                              red: 0,

  354                          }),
  355:                         ANSIBasicColor::DarkYellow => Ok(RgbValue {
  356                              red: 128,

  359                          }),
  360:                         ANSIBasicColor::DarkMagenta => Ok(RgbValue {
  361                              red: 128,

  364                          }),
  365:                         ANSIBasicColor::DarkCyan => Ok(RgbValue {
  366                              red: 0,

  379  
  380:     impl TransformColor for RgbValue {
  381:         fn as_rgb(&self) -> RgbValue { *self }
  382  
  383:         fn as_ansi(&self) -> AnsiValue { convert_rgb_into_ansi256(*self) }
  384  
  385:         fn as_grayscale(&self) -> AnsiValue {
  386              convert_rgb_into_ansi256(*self).as_grayscale()

  395      (dark_pink) => {
  396:         $crate::RgbValue::from((203, 85, 121))
  397      };

  399      (pink) => {
  400:         $crate::RgbValue::from((195, 106, 138))
  401      };

  403      (lizard_green) => {
  404:         $crate::RgbValue::from((20, 244, 0))
  405      };

  407      (dark_lizard_green) => {
  408:         $crate::RgbValue::from((10, 122, 0))
  409      };

  411      (slate_grey) => {
  412:         $crate::RgbValue::from((94, 103, 111))
  413      };

  415      (silver_metallic) => {
  416:         $crate::RgbValue::from((213, 217, 220))
  417      };

  419      (frozen_blue) => {
  420:         $crate::RgbValue::from((171, 204, 242))
  421      };

  423      (moonlight_blue) => {
  424:         $crate::RgbValue::from((31, 36, 46))
  425      };

  427      (night_blue) => {
  428:         $crate::RgbValue::from((14, 17, 23))
  429      };

  431      (guards_red) => {
  432:         $crate::RgbValue::from((200, 1, 1))
  433      };

  435      (orange) => {
  436:         $crate::RgbValue::from((255, 132, 18))
  437      };

  439      (black) => {
  440:         $crate::RgbValue::from((0, 0, 0))
  441      };

  443      (dark_grey) => {
  444:         $crate::RgbValue::from((64, 64, 64))
  445      };

  447      (red) => {
  448:         $crate::RgbValue::from((255, 0, 0))
  449      };

  451      (dark_red) => {
  452:         $crate::RgbValue::from((139, 0, 0))
  453      };

  455      (green) => {
  456:         $crate::RgbValue::from((0, 255, 0))
  457      };

  459      (dark_green) => {
  460:         $crate::RgbValue::from((0, 100, 0))
  461      };

  463      (yellow) => {
  464:         $crate::RgbValue::from((255, 255, 0))
  465      };

  467      (dark_yellow) => {
  468:         $crate::RgbValue::from((204, 204, 0))
  469      };

  471      (blue) => {
  472:         $crate::RgbValue::from((0, 0, 255))
  473      };

  475      (dark_blue) => {
  476:         $crate::RgbValue::from((0, 0, 139))
  477      };

  479      (magenta) => {
  480:         $crate::RgbValue::from((255, 0, 255))
  481      };

  483      (dark_magenta) => {
  484:         $crate::RgbValue::from((139, 0, 139))
  485      };

  487      (cyan) => {
  488:         $crate::RgbValue::from((0, 255, 255))
  489      };

  491      (dark_cyan) => {
  492:         $crate::RgbValue::from((0, 139, 139))
  493      };

  495      (white) => {
  496:         $crate::RgbValue::from((255, 255, 255))
  497      };

  499      (grey) => {
  500:         $crate::RgbValue::from((192, 192, 192))
  501      };

  508      ) => {
  509:         $crate::RgbValue::from(($arg_r, $arg_g, $arg_b))
  510      };

  513  #[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]
  514: pub struct AnsiValue {
  515      pub index: u8,

  520  
  521:     impl From<u8> for AnsiValue {
  522          fn from(index: u8) -> Self { Self { index } }

  524  
  525:     impl TransformColor for AnsiValue {
  526:         fn as_grayscale(&self) -> AnsiValue {
  527              let index = self.index as usize;
  528              let rgb = ANSI_COLOR_PALETTE[index];
  529:             let rgb = RgbValue::from(rgb);
  530              let rgb = color_utils::convert_grayscale((rgb.red, rgb.green, rgb.blue));
  531:             convert_rgb_into_ansi256(RgbValue {
  532                  red: rgb.0,

  537  
  538:         fn as_rgb(&self) -> RgbValue {
  539              let index = self.index as usize;

  542  
  543:         fn as_ansi(&self) -> AnsiValue { *self }
  544      }

  549  
  550:     impl Default for RgbValue {
  551          fn default() -> Self { Self::from_u8(255, 255, 255) }

  553  
  554:     impl AnsiValue {
  555          pub fn new(color: u8) -> Self { Self { index: color } }

  559  /// This is useful when you want to mix and match the two crates. For example, you can use
  560: /// a nice color from `tui_color!(lizard_green)` and then convert it to an ASTColor using
  561: /// `ASTColor::from(tui_color)`. So you're no longer limited to the basic colors when
  562: /// using `ASTColor` in your code (which happens when generating colorized log output).
  563  mod convert_to_ast_color {

  565  
  566:     impl From<TuiColor> for ASTColor {
  567          fn from(tui_color: TuiColor) -> Self {
  568              match tui_color {
  569:                 TuiColor::Rgb(rgb) => ASTColor::Rgb(rgb),
  570:                 TuiColor::Ansi(ansi) => ASTColor::Ansi(ansi),
  571                  TuiColor::Basic(basic) => {
  572:                     let rgb = RgbValue::try_from_tui_color(TuiColor::Basic(basic))
  573                          .unwrap_or_default();
  574:                     ASTColor::Rgb(rgb)
  575                  }
  576:                 TuiColor::Reset => ASTColor::default(),
  577              }

  585  
  586:     impl From<RgbValue> for AnsiValue {
  587:         fn from(rgb_value: RgbValue) -> Self {
  588:             let rgb_color = crate::RgbValue {
  589                  red: rgb_value.red,

  597  
  598:     impl From<AnsiValue> for RgbValue {
  599:         fn from(ansi_value: AnsiValue) -> Self {
  600:             let rgb_color = crate::AnsiValue {
  601                  index: ansi_value.index,

  619      fn test_ansi_to_rgb() {
  620:         let ansi = AnsiValue::new(57);
  621:         let rgb = RgbValue::from(ansi);
  622:         assert_eq2!(rgb, RgbValue::from_u8(95, 0, 255))
  623      }

  629      fn test_rgb_to_ansi() {
  630:         let rgb = RgbValue::from_u8(95, 0, 255);
  631:         let ansi = AnsiValue::from(rgb);
  632:         assert_eq2!(ansi, AnsiValue::new(57))
  633      }

  637          let color = tui_color!(ansi 42);
  638:         assert_eq2!(color, TuiColor::Ansi(AnsiValue::new(42)));
  639      }

  642      fn test_new() {
  643:         let value = RgbValue::from_u8(1, 2, 3);
  644          assert_eq2!((value.red, value.green, value.blue), (1, 2, 3));

  651              let hex_color = "#ff0000";
  652:             let value = RgbValue::try_from_hex_color(hex_color).unwrap();
  653              assert_eq2!((value.red, value.green, value.blue), (255, 0, 0));

  658              let hex_color = "#ff000";
  659:             let value = RgbValue::try_from_hex_color(hex_color);
  660              assert!(value.is_err());

  673          assert_eq2!(
  674:             RgbValue::try_from_tui_color(TuiColor::Rgb(RgbValue::from_u8(1, 2, 3)))
  675                  .unwrap(),
  676:             RgbValue {
  677                  red: 1,

  683          assert_eq2!(
  684:             RgbValue::try_from_tui_color(TuiColor::Basic(ANSIBasicColor::Black)).unwrap(),
  685:             RgbValue {
  686                  red: 0,

  692          assert_eq2!(
  693:             RgbValue::try_from_tui_color(TuiColor::Basic(ANSIBasicColor::White)).unwrap(),
  694:             RgbValue {
  695                  red: 255,

  701          assert_eq2!(
  702:             RgbValue::try_from_tui_color(TuiColor::Basic(ANSIBasicColor::Grey)).unwrap(),
  703:             RgbValue {
  704                  red: 128,

  710          assert_eq2!(
  711:             RgbValue::try_from_tui_color(TuiColor::Basic(ANSIBasicColor::Red)).unwrap(),
  712:             RgbValue {
  713                  red: 255,

  719          assert_eq2!(
  720:             RgbValue::try_from_tui_color(TuiColor::Basic(ANSIBasicColor::Green)).unwrap(),
  721:             RgbValue {
  722                  red: 0,

  758          assert_eq2!(
  759:             RgbValue::try_from_tui_color(black).unwrap(),
  760:             RgbValue {
  761                  red: 0,

  767          assert_eq2!(
  768:             RgbValue::try_from_tui_color(dark_grey).unwrap(),
  769:             RgbValue {
  770                  red: 64,

  776          assert_eq2!(
  777:             RgbValue::try_from_tui_color(red).unwrap(),
  778:             RgbValue {
  779                  red: 255,

  785          assert_eq2!(
  786:             RgbValue::try_from_tui_color(dark_red).unwrap(),
  787:             RgbValue {
  788                  red: 128,

  794          assert_eq2!(
  795:             RgbValue::try_from_tui_color(green).unwrap(),
  796:             RgbValue {
  797                  red: 0,

  803          assert_eq2!(
  804:             RgbValue::try_from_tui_color(dark_green).unwrap(),
  805:             RgbValue {
  806                  red: 0,

  812          assert_eq2!(
  813:             RgbValue::try_from_tui_color(yellow).unwrap(),
  814:             RgbValue {
  815                  red: 255,

  821          assert_eq2!(
  822:             RgbValue::try_from_tui_color(dark_yellow).unwrap(),
  823:             RgbValue {
  824                  red: 128,

  830          assert_eq2!(
  831:             RgbValue::try_from_tui_color(blue).unwrap(),
  832:             RgbValue {
  833                  red: 0,

  839          assert_eq2!(
  840:             RgbValue::try_from_tui_color(dark_blue).unwrap(),
  841:             RgbValue {
  842                  red: 0,

  848          assert_eq2!(
  849:             RgbValue::try_from_tui_color(magenta).unwrap(),
  850:             RgbValue {
  851                  red: 255,

  857          assert_eq2!(
  858:             RgbValue::try_from_tui_color(dark_magenta).unwrap(),
  859:             RgbValue {
  860                  red: 128,

  866          assert_eq2!(
  867:             RgbValue::try_from_tui_color(cyan).unwrap(),
  868:             RgbValue {
  869                  red: 0,

  875          assert_eq2!(
  876:             RgbValue::try_from_tui_color(dark_cyan).unwrap(),
  877:             RgbValue {
  878                  red: 0,

  884          assert_eq2!(
  885:             RgbValue::try_from_tui_color(white).unwrap(),
  886:             RgbValue {
  887                  red: 255,

  893          assert_eq2!(
  894:             RgbValue::try_from_tui_color(grey).unwrap(),
  895:             RgbValue {
  896                  red: 128,

  901  
  902:         assert!(RgbValue::try_from_tui_color(reset).is_err());
  903  
  904          assert_eq2!(
  905:             RgbValue::try_from_tui_color(lizard_green).unwrap(),
  906:             RgbValue {
  907                  red: 20,

  913          assert_eq2!(
  914:             RgbValue::try_from_tui_color(slate_grey).unwrap(),
  915:             RgbValue {
  916                  red: 94,

  922          assert_eq2!(
  923:             RgbValue::try_from_tui_color(silver_metallic).unwrap(),
  924:             RgbValue {
  925                  red: 213,

  931          assert_eq2!(
  932:             RgbValue::try_from_tui_color(frozen_blue).unwrap(),
  933:             RgbValue {
  934                  red: 171,

  940          assert_eq2!(
  941:             RgbValue::try_from_tui_color(moonlight_blue).unwrap(),
  942:             RgbValue {
  943                  red: 31,

  949          assert_eq2!(
  950:             RgbValue::try_from_tui_color(night_blue).unwrap(),
  951:             RgbValue {
  952                  red: 14,

  958          assert_eq2!(
  959:             RgbValue::try_from_tui_color(guards_red).unwrap(),
  960:             RgbValue {
  961                  red: 200,

  967          assert_eq2!(
  968:             RgbValue::try_from_tui_color(orange).unwrap(),
  969:             RgbValue {
  970                  red: 255,

  983              match self {
  984:                 TuiColor::Rgb(RgbValue { red, green, blue }) => {
  985                      write!(f, "{red},{green},{blue}")

core/src/tui_core/tui_style/tui_style_impl.rs:
  33  /// ```rust
  34: /// use r3bl_core::{TuiStyle, TuiColor, TuiStylesheet, RgbValue};
  35  ///

  46  ///         dim: true,
  47: ///         color_fg: Some(TuiColor::Rgb (RgbValue{ red: 55, green: 55, blue: 248 })),
  48  ///         .. Default::default()

  53  ///         dim: true,
  54: ///         color_fg: Some(TuiColor::Rgb (RgbValue{ red: 55, green: 55, blue: 248 })),
  55  ///         .. Default::default()

core/src/tui_core/tui_style/tui_style_lite.rs:
  29  /// ```ignore
  30: /// use r3bl_tui_core::{TuiColor, TuiStyle, RgbValue};
  31: /// let color_bg = TuiColor::Rgb(RgbValue::from_hex("#076DEB"));
  32: /// let color_fg = TuiColor::Rgb(RgbValue::from_hex("#E9C940"));
  33  /// let style = new_style!(

core/src/tui_core/tui_style/tui_stylesheet.rs:
  131  /// ```
  132: /// use r3bl_core::{ch, ChUnit, TuiColor, RgbValue, TuiStyle, TryAdd, tui_stylesheet, CommonResult, throws_with_return, TuiStylesheet};
  133  /// fn create_tui_stylesheet() -> CommonResult<TuiStylesheet> {

  138  ///             padding: Some(ch(1)),
  139: ///             color_bg: Some(TuiColor::Rgb(RgbValue::from_u8(55, 55, 248))),
  140  ///             ..Default::default()

  145  ///                 padding: Some(ch(1)),
  146: ///                 color_bg: Some(TuiColor::Rgb(RgbValue::from_u8(155, 155, 48))),
  147  ///                 ..Default::default()

  151  ///                 padding: Some(ch(1)),
  152: ///                 color_bg: Some(TuiColor::Rgb(RgbValue::from_u8(5, 5, 48))),
  153  ///                 ..Default::default()

log/src/log_support/custom_event_formatter.rs:
   39  use custom_event_formatter_constants::*;
   40: use r3bl_core::{ASTColor,
   41                  ASTStyle,

   48                  OrderedMap,
   49:                 RgbValue,
   50                  fg_rgb_color,

  104  
  105:     pub const BODY_FG_COLOR: ASTColor =         ASTColor::Rgb(RgbValue{red:175,green: 175,blue: 175});
  106:     pub const BODY_FG_COLOR_BRIGHT: ASTColor =  ASTColor::Rgb(RgbValue{red:200,green: 200,blue: 200});
  107:     pub const HEADING_BG_COLOR: ASTColor =      ASTColor::Rgb(RgbValue{red:70,green: 70,blue: 90});
  108:     pub const INFO_FG_COLOR: ASTColor =         ASTColor::Rgb(RgbValue{red:233,green: 150,blue: 122});
  109:     pub const ERROR_FG_COLOR: ASTColor =        ASTColor::Rgb(RgbValue{red:255,green: 182,blue: 193});
  110:     pub const WARN_FG_COLOR: ASTColor =         ASTColor::Rgb(RgbValue{red:255,green: 140,blue: 0});
  111:     pub const DEBUG_FG_COLOR: ASTColor =        ASTColor::Rgb(RgbValue{red:255,green: 255,blue: 0});
  112:     pub const TRACE_FG_COLOR: ASTColor =        ASTColor::Rgb(RgbValue{red:186,green: 85,blue: 211});
  113  }

tui/examples/demo/main.rs:
  47                  tui_color,
  48:                 ASTColor,
  49                  CommonError,

  78  
  79:     let msg_fmt = fg_rgb_color(ASTColor::from(tui_color!(lizard_green)), &msg);
  80      ta_println!(terminal_async, "{}", msg_fmt.to_string());

tuify/README.md:
  238  
  239: use r3bl_core::{AnsiStyledText, ASTColor, ASTStyle};
  240  use r3bl_tuify::{

  249          style: smallvec::smallvec![
  250:             ASTStyle::Foreground(ASTColor::Rgb(9, 238, 211)),
  251:             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  252          ],

  256          style: smallvec::smallvec![
  257:             ASTStyle::Foreground(ASTColor::Rgb(94, 103, 111)),
  258:             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  259          ],

  266          style: smallvec::smallvec![
  267:             ASTStyle::Foreground(ASTColor::Rgb(255, 216, 9)),
  268:             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  269          ],

  273          style: smallvec::smallvec![
  274:             ASTStyle::Foreground(ASTColor::Rgb(94, 103, 111)),
  275:             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  276          ],

  283          style: smallvec::smallvec![
  284:             ASTStyle::Foreground(ASTColor::Rgb(255, 132, 18)),
  285:             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  286          ],

  290          style: smallvec::smallvec![
  291:             ASTStyle::Foreground(ASTColor::Rgb(94, 103, 111)),
  292:             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  293          ],

  299          style: smallvec::smallvec![
  300:             ASTStyle::Foreground(ASTColor::Rgb(234, 0, 196)),
  301:             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  302          ],

  306          style: smallvec::smallvec![
  307:             ASTStyle::Foreground(ASTColor::Rgb(94, 103, 111)),
  308:             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  309          ],

  318          style: smallvec::smallvec![
  319:             ASTStyle::Foreground(ASTColor::Rgb(171, 204, 242)),
  320:             ASTStyle::Background(ASTColor::Rgb(31, 36, 46)),
  321          ],

  571  use std::io::Result;
  572: use r3bl_core::{AnsiStyledText, ASTColor};
  573  use r3bl_tuify::{components::style::{Style, StyleSheet},

  582        focused_and_selected_style: Style {
  583:             fg_color: ASTColor::Rgb(255, 244, 0),
  584:             bg_color: ASTColor::Rgb(15, 32, 66),
  585              ..Style::default()

  587        focused_style: Style {
  588:             fg_color: ASTColor::Rgb(255, 244, 0),
  589              ..Style::default()

  592        selected_style: Style {
  593:             fg_color: ASTColor::Rgb(203, 170, 250),
  594:             bg_color: ASTColor::Rgb(15, 32, 66),
  595              ..Style::default()

  597        header_style: Style {
  598:             fg_color: ASTColor::Rgb(171, 204, 242),
  599:             bg_color: ASTColor::Rgb(31, 36, 46),
  600              ..Style::default()

tuify/examples/main_interactive.rs:
   23                  usize,
   24:                 ASTColor,
   25                  ASTStyle,

  153          style: smallvec::smallvec![
  154:             ASTStyle::Foreground(ASTColor::Rgb((171, 204, 242).into())),
  155:             ASTStyle::Background(ASTColor::Rgb((31, 36, 46).into())),
  156          ],

  243          style: smallvec::smallvec![
  244:             ASTStyle::Foreground(ASTColor::Rgb((171, 204, 242).into())),
  245:             ASTStyle::Background(ASTColor::Rgb((31, 36, 46).into())),
  246          ],

  275          style: smallvec::smallvec![
  276:             ASTStyle::Foreground(ASTColor::Rgb((229, 239, 123).into())),
  277:             ASTStyle::Background(ASTColor::Rgb((31, 36, 46).into())),
  278          ],

  331          style: smallvec::smallvec![
  332:             ASTStyle::Foreground(ASTColor::Rgb((229, 239, 123).into())),
  333:             ASTStyle::Background(ASTColor::Rgb((31, 36, 46).into())),
  334          ],

  420          style: smallvec::smallvec![
  421:             ASTStyle::Foreground(ASTColor::Rgb((171, 204, 242).into())),
  422:             ASTStyle::Background(ASTColor::Rgb((31, 36, 46).into())),
  423          ],

  456          style: smallvec::smallvec![
  457:             ASTStyle::Foreground(ASTColor::Rgb((9, 238, 211).into())),
  458:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  459          ],

  463          style: smallvec::smallvec![
  464:             ASTStyle::Foreground(ASTColor::Rgb((94, 103, 111).into())),
  465:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  466          ],

  473          style: smallvec::smallvec![
  474:             ASTStyle::Foreground(ASTColor::Rgb((255, 216, 9).into())),
  475:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  476          ],

  480          style: smallvec::smallvec![
  481:             ASTStyle::Foreground(ASTColor::Rgb((94, 103, 111).into())),
  482:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  483          ],

  490          style: smallvec::smallvec![
  491:             ASTStyle::Foreground(ASTColor::Rgb((255, 132, 18).into())),
  492:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  493          ],

  497          style: smallvec::smallvec![
  498:             ASTStyle::Foreground(ASTColor::Rgb((94, 103, 111).into())),
  499:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  500          ],

  506          style: smallvec::smallvec![
  507:             ASTStyle::Foreground(ASTColor::Rgb((234, 0, 196).into())),
  508:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  509          ],

  513          style: smallvec::smallvec![
  514:             ASTStyle::Foreground(ASTColor::Rgb((94, 103, 111).into())),
  515:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  516          ],

  525          style: smallvec::smallvec![
  526:             ASTStyle::Foreground(ASTColor::Rgb((9, 238, 211).into())),
  527:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  528          ],

  532          style: smallvec::smallvec![
  533:             ASTStyle::Foreground(ASTColor::Rgb((94, 103, 111).into())),
  534:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  535          ],

  542          style: smallvec::smallvec![
  543:             ASTStyle::Foreground(ASTColor::Rgb((255, 132, 18).into())),
  544:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  545          ],

  549          style: smallvec::smallvec![
  550:             ASTStyle::Foreground(ASTColor::Rgb((94, 103, 111).into())),
  551:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  552          ],

  558          style: smallvec::smallvec![
  559:             ASTStyle::Foreground(ASTColor::Rgb((234, 0, 196).into())),
  560:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  561          ],

  565          style: smallvec::smallvec![
  566:             ASTStyle::Foreground(ASTColor::Rgb((94, 103, 111).into())),
  567:             ASTStyle::Background(ASTColor::Rgb((14, 17, 23).into())),
  568          ],

tuify/examples/single_select_quiz_game.rs:
   19  
   20: use r3bl_core::{self, get_terminal_width, usize, ASTColor, ASTStyle, AnsiStyledText};
   21  use r3bl_tuify::{select_from_list, SelectionMode, StyleSheet};

   42      let mut score = 0;
   43:     let correct_answer_color = ASTColor::Rgb((255, 216, 9).into());
   44:     let incorrect_answer_color = ASTColor::Rgb((255, 70, 30).into());
   45      let line_length = 60;

   96          let color = match self {
   97:             Answer::Correct => ASTColor::Rgb((5, 236, 0).into()),
   98:             Answer::Incorrect => ASTColor::Rgb((234, 0, 196).into()),
   99          };

  138  fn display_header(line_length: usize) {
  139:     let color = ASTColor::Rgb((9, 183, 238).into());
  140      println!();

  166      let line = "─".to_string().as_str().repeat(line_length - 2);
  167:     let color = ASTColor::Rgb((9, 183, 238).into());
  168  

  205      user_input: &Option<Vec<String>>,
  206:     correct_answer_color: ASTColor,
  207:     incorrect_answer_color: ASTColor,
  208      score: &mut i32,

tuify/src/constants.rs:
  17  
  18: use r3bl_core::{ASTColor, RgbValue};
  19  
  20  // Colors.
  21: pub const LIZARD_GREEN: ASTColor = ASTColor::Rgb(RgbValue {
  22      red: 20,

  25  });
  26: pub const SLATE_GRAY: ASTColor = ASTColor::Rgb(RgbValue {
  27      red: 94,

  30  });
  31: pub const FROZEN_BLUE: ASTColor = ASTColor::Rgb(RgbValue {
  32      red: 171,

  35  });
  36: pub const GUARDS_RED: ASTColor = ASTColor::Rgb(RgbValue {
  37      red: 200,

tuify/src/lib.rs:
  253  //!
  254: //! use r3bl_core::{AnsiStyledText, ASTColor, ASTStyle};
  255  //! use r3bl_tuify::{

  264  //!         style: smallvec::smallvec![
  265: //!             ASTStyle::Foreground(ASTColor::Rgb(9, 238, 211)),
  266: //!             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  267  //!         ],

  271  //!         style: smallvec::smallvec![
  272: //!             ASTStyle::Foreground(ASTColor::Rgb(94, 103, 111)),
  273: //!             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  274  //!         ],

  281  //!         style: smallvec::smallvec![
  282: //!             ASTStyle::Foreground(ASTColor::Rgb(255, 216, 9)),
  283: //!             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  284  //!         ],

  288  //!         style: smallvec::smallvec![
  289: //!             ASTStyle::Foreground(ASTColor::Rgb(94, 103, 111)),
  290: //!             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  291  //!         ],

  298  //!         style: smallvec::smallvec![
  299: //!             ASTStyle::Foreground(ASTColor::Rgb(255, 132, 18)),
  300: //!             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  301  //!         ],

  305  //!         style: smallvec::smallvec![
  306: //!             ASTStyle::Foreground(ASTColor::Rgb(94, 103, 111)),
  307: //!             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  308  //!         ],

  314  //!         style: smallvec::smallvec![
  315: //!             ASTStyle::Foreground(ASTColor::Rgb(234, 0, 196)),
  316: //!             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  317  //!         ],

  321  //!         style: smallvec::smallvec![
  322: //!             ASTStyle::Foreground(ASTColor::Rgb(94, 103, 111)),
  323: //!             ASTStyle::Background(ASTColor::Rgb(14, 17, 23)),
  324  //!         ],

  333  //!         style: smallvec::smallvec![
  334: //!             ASTStyle::Foreground(ASTColor::Rgb(171, 204, 242)),
  335: //!             ASTStyle::Background(ASTColor::Rgb(31, 36, 46)),
  336  //!         ],

  586  //! use std::io::Result;
  587: //! use r3bl_core::{AnsiStyledText, ASTColor};
  588  //! use r3bl_tuify::{components::style::{Style, StyleSheet},

  597  //!       focused_and_selected_style: Style {
  598: //!             fg_color: ASTColor::Rgb(255, 244, 0),
  599: //!             bg_color: ASTColor::Rgb(15, 32, 66),
  600  //!             ..Style::default()

  602  //!       focused_style: Style {
  603: //!             fg_color: ASTColor::Rgb(255, 244, 0),
  604  //!             ..Style::default()

  607  //!       selected_style: Style {
  608: //!             fg_color: ASTColor::Rgb(203, 170, 250),
  609: //!             bg_color: ASTColor::Rgb(15, 32, 66),
  610  //!             ..Style::default()

  612  //!       header_style: Style {
  613: //!             fg_color: ASTColor::Rgb(171, 204, 242),
  614: //!             bg_color: ASTColor::Rgb(31, 36, 46),
  615  //!             ..Style::default()

tuify/src/components/apply_style_macro.rs:
  18  use crossterm::style::{Attribute, Color, SetAttribute};
  19: use r3bl_core::{global_color_support, ASTColor, ColorSupport, TransformColor};
  20  
  21: pub fn get_crossterm_color_based_on_terminal_capabilities(color: ASTColor) -> Color {
  22      let detect_color_support = global_color_support::detect();

  31          }
  32:         _ => Color::AnsiValue(color.as_ansi().index),
  33      }

tuify/src/components/style.rs:
   17  
   18: use r3bl_core::ASTColor;
   19  

   31          let focused_and_selected_style = Style {
   32:             fg_color: ASTColor::Rgb((20, 244, 0).into()),
   33:             bg_color: ASTColor::Rgb((51, 32, 66).into()),
   34              ..Style::default()

   36          let focused_style = Style {
   37:             fg_color: ASTColor::Rgb((20, 244, 0).into()),
   38              ..Style::default()

   41          let selected_style = Style {
   42:             fg_color: ASTColor::Rgb((203, 170, 250).into()),
   43:             bg_color: ASTColor::Rgb((51, 32, 66).into()),
   44              ..Style::default()

   46          let header_style = Style {
   47:             fg_color: ASTColor::Rgb((171, 204, 242).into()),
   48:             bg_color: ASTColor::Rgb((31, 36, 46).into()),
   49              ..Style::default()

   63          let focused_and_selected_style = Style {
   64:             fg_color: ASTColor::Rgb((19, 227, 255).into()),
   65:             bg_color: ASTColor::Rgb((6, 41, 52).into()),
   66              ..Style::default()

   68          let focused_style = Style {
   69:             fg_color: ASTColor::Rgb((19, 227, 255).into()),
   70:             bg_color: ASTColor::Rgb((14, 17, 23).into()),
   71              ..Style::default()

   73          let unselected_style = Style {
   74:             fg_color: ASTColor::Rgb((241, 241, 241).into()),
   75:             bg_color: ASTColor::Rgb((14, 17, 23).into()),
   76              ..Style::default()

   78          let selected_style = Style {
   79:             fg_color: ASTColor::Rgb((209, 244, 255).into()),
   80:             bg_color: ASTColor::Rgb((6, 41, 52).into()),
   81              ..Style::default()

   83          let header_style = Style {
   84:             fg_color: ASTColor::Rgb((229, 239, 123).into()),
   85:             bg_color: ASTColor::Rgb((31, 36, 46).into()),
   86              ..Style::default()

   98          let focused_and_selected_style = Style {
   99:             fg_color: ASTColor::Rgb((255, 0, 214).into()),
  100:             bg_color: ASTColor::Rgb((62, 14, 74).into()),
  101              ..Style::default()

  103          let focused_style = Style {
  104:             fg_color: ASTColor::Rgb((255, 0, 214).into()),
  105:             bg_color: ASTColor::Rgb((14, 17, 23).into()),
  106              ..Style::default()

  108          let unselected_style = Style {
  109:             fg_color: ASTColor::Rgb((219, 202, 232).into()),
  110:             bg_color: ASTColor::Rgb((14, 17, 23).into()),
  111              ..Style::default()

  113          let selected_style = Style {
  114:             fg_color: ASTColor::Rgb((255, 181, 234).into()),
  115:             bg_color: ASTColor::Rgb((62, 14, 74).into()),
  116              ..Style::default()

  118          let header_style = Style {
  119:             fg_color: ASTColor::Rgb((190, 253, 249).into()),
  120:             bg_color: ASTColor::Rgb((31, 36, 46).into()),
  121              ..Style::default()

  141      pub strikethrough: bool,
  142:     pub fg_color: ASTColor,
  143:     pub bg_color: ASTColor,
  144  }

  155              strikethrough: false,
  156:             fg_color: ASTColor::Rgb((193, 193, 193).into()),
  157:             bg_color: ASTColor::Rgb((14, 17, 23).into()),
  158          }

  171              stylesheet.focused_and_selected_style.fg_color,
  172:             ASTColor::Rgb((20, 244, 0).into())
  173          );

  175              stylesheet.focused_and_selected_style.bg_color,
  176:             ASTColor::Rgb((51, 32, 66).into())
  177          );

  180              stylesheet.focused_style.fg_color,
  181:             ASTColor::Rgb((20, 244, 0).into())
  182          );

  185              stylesheet.unselected_style.fg_color,
  186:             ASTColor::Rgb((193, 193, 193).into())
  187          );

  189              stylesheet.unselected_style.bg_color,
  190:             ASTColor::Rgb((14, 17, 23).into())
  191          );

  194              stylesheet.selected_style.fg_color,
  195:             ASTColor::Rgb((203, 170, 250).into())
  196          );

  198              stylesheet.selected_style.bg_color,
  199:             ASTColor::Rgb((51, 32, 66).into())
  200          );

  203              stylesheet.header_style.fg_color,
  204:             ASTColor::Rgb((171, 204, 242).into())
  205          );

  207              stylesheet.header_style.bg_color,
  208:             ASTColor::Rgb((31, 36, 46).into())
  209          );

  217              stylesheet.focused_and_selected_style.fg_color,
  218:             ASTColor::Rgb((19, 227, 255).into())
  219          );

  221              stylesheet.focused_and_selected_style.bg_color,
  222:             ASTColor::Rgb((6, 41, 52).into())
  223          );

  226              stylesheet.focused_style.fg_color,
  227:             ASTColor::Rgb((19, 227, 255).into())
  228          );

  230              stylesheet.focused_style.bg_color,
  231:             ASTColor::Rgb((14, 17, 23).into())
  232          );

  235              stylesheet.unselected_style.fg_color,
  236:             ASTColor::Rgb((241, 241, 241).into())
  237          );

  239              stylesheet.unselected_style.bg_color,
  240:             ASTColor::Rgb((14, 17, 23).into())
  241          );

  244              stylesheet.selected_style.fg_color,
  245:             ASTColor::Rgb((209, 244, 255).into())
  246          );

  248              stylesheet.selected_style.bg_color,
  249:             ASTColor::Rgb((6, 41, 52).into())
  250          );

  253              stylesheet.header_style.fg_color,
  254:             ASTColor::Rgb((229, 239, 123).into())
  255          );

  257              stylesheet.header_style.bg_color,
  258:             ASTColor::Rgb((31, 36, 46).into())
  259          );

  267              style_sheet.focused_and_selected_style.fg_color,
  268:             ASTColor::Rgb((255, 0, 214).into())
  269          );

  271              style_sheet.focused_and_selected_style.bg_color,
  272:             ASTColor::Rgb((62, 14, 74).into())
  273          );

  275              style_sheet.focused_style.fg_color,
  276:             ASTColor::Rgb((255, 0, 214).into())
  277          );

  279              style_sheet.focused_style.bg_color,
  280:             ASTColor::Rgb((14, 17, 23).into())
  281          );

  283              style_sheet.unselected_style.fg_color,
  284:             ASTColor::Rgb((219, 202, 232).into())
  285          );

  287              style_sheet.unselected_style.bg_color,
  288:             ASTColor::Rgb((14, 17, 23).into())
  289          );

  291              style_sheet.selected_style.fg_color,
  292:             ASTColor::Rgb((255, 181, 234).into())
  293          );

  295              style_sheet.selected_style.bg_color,
  296:             ASTColor::Rgb((62, 14, 74).into())
  297          );

  299              style_sheet.header_style.fg_color,
  300:             ASTColor::Rgb((190, 253, 249).into())
  301          );

  303              style_sheet.header_style.bg_color,
  304:             ASTColor::Rgb((31, 36, 46).into())
  305          );
