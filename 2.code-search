# Query: (NAV:|REVIEW: \\[ \\]|CS:)
# Flags: CaseSensitive RegExp
# Excluding: scratch.rs
# ContextLines: 10

6 results - 5 files

core/src/tui_core/graphemes/gc_string.rs:
     8   *
     9   *   http://www.apache.org/licenses/LICENSE-2.0
    10   *
    11   *   Unless required by applicable law or agreed to in writing, software
    12   *   distributed under the License is distributed on an "AS IS" BASIS,
    13   *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    14   *   See the License for the specific language governing permissions and
    15   *   limitations under the License.
    16   */
    17  
    18: // REVIEW: [ ] remove these cspell exceptions after merging this patch into the feature branch
    19  // cspell:ignore bindex smallvec ustr assert_eq ustring col_index uindex xello Xelo Loby
    20  use std::{fmt::Debug,
    21            ops::{Add, Deref, DerefMut}};
    22  
    23  use smallvec::SmallVec;
    24  use unicode_segmentation::UnicodeSegmentation as _;
    25  use unicode_width::{UnicodeWidthChar, UnicodeWidthStr};
    26  
    27  use crate::{ByteIndex,
    28              ChUnit,

  1499      #[test]
  1500      fn test_split_at_display_col() {
  1501          let gs = grapheme_string(TEST_STR);
  1502  
  1503          assert_eq!(w("📦"), width(2));
  1504          assert_eq!(w("🙏🏽"), width(2));
  1505          assert_eq!(w(TEST_STR), width(14)); /* max col index is 13, width - 1 */
  1506          assert_eq!(gs.len(), seg_width(12));
  1507          assert_eq!(gs.get_max_seg_index(), seg_index(11));
  1508  
  1509:         // REVIEW: [ ] impl test
  1510          let test_cases = [
  1511              (col(0), Some(("".into(), "Hi📦XelLo🙏🏽Bye".into()))),
  1512              (col(1), Some(("H".into(), "i📦XelLo🙏🏽Bye".into()))),
  1513              (col(2), Some(("Hi".into(), "📦XelLo🙏🏽Bye".into()))), /* `📦` is 2 display cols wide */
  1514              (col(3), Some(("Hi".into(), "📦XelLo🙏🏽Bye".into()))), /* `📦` is 2 display cols wide */
  1515              (col(4), Some(("Hi📦".into(), "XelLo🙏🏽Bye".into()))),
  1516              (col(5), Some(("Hi📦X".into(), "elLo🙏🏽Bye".into()))),
  1517              (col(6), Some(("Hi📦Xe".into(), "lLo🙏🏽Bye".into()))),
  1518              (col(7), Some(("Hi📦Xel".into(), "Lo🙏🏽Bye".into()))),
  1519              (col(8), Some(("Hi📦XelL".into(), "o🙏🏽Bye".into()))),

core/src/tui_core/graphemes/mod.rs:
   8   *
   9   *   http://www.apache.org/licenses/LICENSE-2.0
  10   *
  11   *   Unless required by applicable law or agreed to in writing, software
  12   *   distributed under the License is distributed on an "AS IS" BASIS,
  13   *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  14   *   See the License for the specific language governing permissions and
  15   *   limitations under the License.
  16   */
  17  
  18: // REVIEW: [ ] remove these cspell exceptions after merging this patch into the feature branch
  19  // cspell:ignore reedline
  20  
  21  //! Rust uses `UTF-8` to represent text in [String]. `UTF-8` is a variable width encoding,
  22  //! so each character can take up a different number of bytes, between 1 and 4, and 1 byte
  23  //! is 8 bits; this is why we use [Vec] of [u8] to represent a [String].
  24  //!
  25  //! For example, the character `H` takes up 1 byte. `UTF-8` is also backward compatible
  26  //! with `ASCII`, meaning that the first 128 characters (the ASCII characters) are
  27  //! represented using the same single byte as in ASCII. So the character `H` is
  28  //! represented by the same byte value in `UTF-8` as it is in `ASCII`. This is why `UTF-8`

core/src/tui_core/graphemes/seg.rs:
   8   *
   9   *   http://www.apache.org/licenses/LICENSE-2.0
  10   *
  11   *   Unless required by applicable law or agreed to in writing, software
  12   *   distributed under the License is distributed on an "AS IS" BASIS,
  13   *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  14   *   See the License for the specific language governing permissions and
  15   *   limitations under the License.
  16   */
  17  
  18: // REVIEW: [ ] remove these cspell exceptions after merging this patch into the feature branch
  19  // cspell:ignore bindex smallvec ustr assert_eq ustring col_index uindex disp
  20  
  21  use std::fmt::Debug;
  22  
  23  use super::SegIndex;
  24  use crate::{ChUnit, ColIndex, ColWidth, usize};
  25  
  26  // REVIEW: [x] update docs
  27  
  28  /// `Seg` represents grapheme cluster segment within a [super::GCString]. A Unicode

tui/examples/demo/ex_app_no_layout/app_main.rs:
  524                  ),
  525                  ColorWheelConfig::Ansi256(
  526                      Ansi256GradientIndex::BackgroundDarkGreenToDarkBlue,
  527                      ColorWheelSpeed::Slow,
  528                  ),
  529              ]);
  530          }
  531      }
  532  }
  533  
  534: // REVIEW: [ ] introduce HUD for telemetry here & copy to all other examples
  535  
  536  mod status_bar {
  537      use super::*;
  538  
  539      /// Shows helpful messages at the bottom row of the screen.
  540      pub fn create_status_bar_message(pipeline: &mut RenderPipeline, size: Dim) {
  541          let styled_texts = tui_styled_texts! {
  542              tui_styled_text!{ @style: tui_style!(attrib: [dim])       , @text: "Hints:"},
  543              tui_styled_text!{ @style: tui_style!(attrib: [bold])      , @text: " x : Exit 🖖 "},
  544              tui_styled_text!{ @style: tui_style!(attrib: [dim])       , @text: " … "},

tui/src/tui/editor/editor_buffer/selection_range.rs:
  23                  width,
  24                  CaretScrAdj,
  25                  ChUnitPrimitiveType,
  26                  ColIndex,
  27                  ColWidth,
  28                  GCString,
  29                  ScrOfs};
  30  
  31  // cspell:ignore worl
  32  
  33: // REVIEW: [ ] move this out of core into tui crate
  34  
  35  /// Represents a range of characters in a line. The col indices are scroll adjusted (and
  36  /// not raw). The row indices are not used, and clobbered with [ChUnitPrimitiveType::MAX].
  37  ///
  38  /// The range is not inclusive of the item at the end index, which means that when you
  39  /// call [crate::SelectionRange::clip_to_range()] the item at the end index will not be
  40  /// part of the result (this is shown in the example below). The indices are all display
  41  /// column indices, not logical ones.
  42  ///
  43  /// ```text
