open: <https://github.com/r3bl-org/r3bl_rs_utils/issues?q=is%3Aopen+is%3Aissue+-label%3Abacklog+>
features: <https://github.com/orgs/r3bl-org/projects/1/views/1>
backlog: <https://github.com/r3bl-org/r3bl_rs_utils/issues?q=is%3Aopen+is%3Aissue+label%3Abacklog+>

editor component upgrades (https://github.com/r3bl-org/r3bl_rs_utils/issues/86):
  ✔ audit docs, source filenames, and symbol names; improve where needed @done(23-05-03 20:56)
  ☐ add selection support to editor buffer (array of line slice ranges)
    ☐ right
      - [✔️] `right_normal(.., select_mode)`: impl this
      - [x] `EditorEngineApi::render_engine()`: render it before caret w/ selection bg color
        - [x] `UnicodeString::clip_to_range(..)`: impl this
      - [.] `EditorBufferApi::chaneg_selection(..)`: impl this
        - handle one line: left, right (add to / remove from selection)
        - handle multiline
      - [.] remove selection when "regular" key is pressed
      - [ ] `right_at_end(.., select_mode)`: impl this
    ☐ left
    ☐ up
    ☐ down
    ☐ page up
    ☐ page down
    ☐ end of line
    ☐ start of line
  ☐ implement copy
  ☐ implement cut
  ☐ implement paste
  ☐ implement delete
  ☐ add tests
  ☐ optional type cleanup to disambiguate between `Index` and `Count`
    - Add `Count` type: 1 based unit of measurement of "width" or "height", use this in codebase
    - Add `Width`, `Height` as separate types
    - Add `Index` type: 0 based index for slice range, use this in codebase

docs update (https://github.com/r3bl-org/r3bl_rs_utils/issues/102):
  ✔ clean up threading docs (in code) @done(23-05-01 15:01)
  ✔ fix threading bug in main event loop @done(23-05-02 14:07)
  ☐ add more tui/README.md (and copy that into tui/lib.rs)
    ☐ overview of the thing
    - https://monroeclinton.com/pointing-devices-in-linux/
    - GUI meets TUI, text reliant but GUI feeling apps that run in a terminal,
      - ASCII art is used gfor UI (eg: dialog boxes being drawn w/ ANSI chars)
      - ANSI escape codes are generated for the entire UI and send to stdout
      - Redux store, and app is constructed, then injected into main_event_loop() fn
    ☐ mental model for the entire thing (dependency injection, etc)
      - where do things live? in state or app? both are passed into main_event_loop() in launcher
        - Get content from https://github.com/r3bl-org/r3bl_rs_utils/issues/103
      - how do components work (use editor component as a case study)
    ☐ concurrency / parallelism / async / tokio - how all this works
      - async or parallel processing of input events
      - async or parallel processing of redux reducers, and middleware (redux related)
    ☐ deep dive of unicode handling
    ☐ deep dive of custom parser & syntax highlighter
    ☐ deep dive of color support & color wheel & lolcat

r3bl_cmdr alpha (https://github.com/r3bl-org/r3bl-cmdr/issues/23):
  ☐ notes editor (just one file at a time)
  ☐ file explorer (to quickly open files in a cwd)
  ☐ analytics measurement
  ☐ dashboard for weather (in status bar w/ beep-boop animation on weather loading)
  ☐ alpha release
