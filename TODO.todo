┏━━━━━━━━━━━━━━━┓
┃ r3bl_rs_utils ┃
┛               ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
editor engine bug:
  ✔ fix: type few lines, press backspace/delete (from end of file) and deleted lines are not removed @done(22-11-28 18:18)
    - paint.rs::paint() does not work property ... the optimization to prevent flicker causes this problem
    - this will be fixed by the compositor work!
    - this is also fixed by printing SPACERs in empty lines of the editor component
    - SHA: https://github.com/r3bl-org/r3bl_rs_utils/commit/e1c6b6b87de0b06ee1f634c72b547bf792d012a7

compositor:
  ✔ implement `render_pipeline_to_offscreen_buffer::RenderPipeline` to IR (`OffscreenBuffer`): @done(22-11-26 10:13)
    ✔ test `RenderPipeline::convert()` @done(22-11-26 14:40)
    ✔ implement ANSI text clipping & padding in `RenderPipeline::print_text_with_attributes()` @done(22-11-28 11:54)
  ✔ test `RenderPipeline::convert()` (offscreen_buffer.rs) @done(22-11-28 11:55)
    ✔ plain text @done(22-11-26 15:29)
    ✔ ANSI text @done(22-11-28 11:55)
    ✔ convert w/ 2 lines and position that isn't (0,0) @done(22-11-27 10:33)
  ✔ implement `OffscreenBufferPaintImplCrossterm` @done(22-11-28 15:18)
    ✔ implement `render()` & test @done(22-11-26 10:13)
    ✔ implement `paint()` @done(22-11-28 15:18)
    ✔ try it out w/ `compositor = true` in `paint.rs` @done(22-11-30 22:19)
  ✔ 🐛bugs: @done(22-12-02 19:04)
    ✔ window_size: [width:76, height:10] w/ editor eg doesn't display ` Ctrl + l : Modal dialog📣` @done(22-11-30 22:18)
    ✔ modal dialog looks distorted, `print_ansi_text` has problems @done(22-12-02 19:04)
  ✔ make offscreen buffer support serde @done(22-12-03 10:09)
  ✔ impl diff between 2 offscreen buffers & paint only the changes pixel chars @done(22-12-03 19:22)
    ✔ make sure it works, tests? @done(22-12-03 19:22)
  ✔ fix bug in example w/ 2 col layout that has text missing @done(22-12-04 13:45)
  ✔ fix things are being clipped twice (once during `convert`, and again on `render_op_impl`) @done(22-12-05 10:23)
      ✔ create a new "dumb" `RenderOp::CompositorNoClipTruncPrintTextWithAttributes` which does NOT handle clipping & padding @done(22-12-05 10:26)
      ✔ use this in `OffscreenBufferPaintImplCrossterm::render()` & `render_diff()` @done(22-12-05 10:26)
  ✔ cleanup @done(22-12-05 10:27)
    ✔ audit the use of `RwLock` for `main_event_loop::GlobalData` @done(22-12-05 10:11)
  ✔ deprecate: @done(22-12-05 17:58)
    ✔ `main_event_loop::GlobalData::cursor_position` @done(22-12-05 17:07)
    ✔ `RenderOp::CursorShow`, `CursorHide` @done(22-12-05 17:07)
    ✔ `RenderOp::RequestShowCaretAtPositionAbs`, `RequestShowCaretAtPositionRelTo` @done(22-12-05 17:07)
    ✔ `RenderOp::PrintTextWithAttributesAndPadding` @done(22-12-05 17:57)
    ✔ editor component should no longer pad empty lines w/ spaces thanks to compositor @done(22-12-05 17:57)
  ✔ bug: @done(22-12-08 19:06)
    ✔ fix log output so it is readable @done(22-12-06 12:24)
    ✔ scrolling this causes issues `# this is a line of x vars monk to y barf cook team by z bark mint🙏🏽😀░` @done(22-12-08 15:43)
    ✔ fix right at end of line not working @done(22-12-08 19:06)
  ✔ fix all broken tests @done(22-12-08 19:22)
  ✔ fix scrolling left bugs for window_size: [width:81, height:13] @done(22-12-10 11:27)
  ☐ update docs
    ✔ put the docs where they belong (in the code): EditorBuffer w/ info on caret & scroll offset @done(22-12-09 15:31)
    ✔ update `dd_compositor.md` - talk about `paint.rs`, offscreen buffer, no flicker, no need to pad w/ spaces @done(22-12-09 19:54)
    ✔ add figma diagram showing how the compositor works @done(22-12-09 19:54)
    ✔ add docs for 2 scripts: `run-with-flamegraph-profiling.fish` & `run-with-crash-reporting.fish` @done(22-12-10 11:27)
    ☐ remove all the TODO:, BUG:, BM:, TK: from changes made in this branch
  ✔ merge `compositor` branch into `main` & close issue https://github.com/r3bl-org/r3bl_rs_utils/issues/46 @done(22-12-10 11:27)
  ☐ cut releases & publish to crates.io
  ☐ make a video & publicize it on reddit

editor engine extras (auto-completion providers):
  ☐ add support for auto completion providers
  ☐ modal dialogs for autocompletion provider, which just use a nested multiline editor component
  ☐ implement auto completion provider for file paths
  ☐ implement auto completion provider for github issues (store creds in env vars)

editor engine extras (search & replace):
  ☐ search & replace
  ☐ text selection & highlighting:
    ☐ add support for text selection highlighting
    ☐ selection, copy, paste

editor engine extras (smart MD editing support like github web app):
  ☐ handle automatically propagating ordered `1. ` & unordered list `- ` like MD editor on github
  ☐ handle automatically propagating `- [ ]` and `- [x]` like MD editor on github

tui components (all implemented w/ editor component):
  ☐ checkbox (single, multi select) implemented w/ editor component (different config options)
  ☐ form implemented w/ editor component (different config options)
  
framework (configurable keyboard shortcuts):
  ☐ a json file w/ keybindings needs to be loaded / stored from `~/.config/r3bl/keybindings.json`
  ☐ there should be defaults provided if the file doesn't exist
  ☐ the keybindings should be configurable via the UI (using an editor component)
  ☐ each keybinding is made up of a keyboard shortcut sequence and an "action name"
  ☐ the action name is a string that maps to a function
  ☐ each component or app that deals w/ input events should convert the event into an action
  ☐ all action names go into a global "action registry" along w/ the shortcuts that trigger them

framework (jarvis mode):
  ☐ w/ shortcuts & autocomplete, impl modal to allow user to type a command and have it executed
  ☐ list of available commands come from the global "action registry" w/ its triggering shortcut

framework (save/load buffer to/from file/db):
  ☐ learn surrealdb
    - https://ori-cohen.medium.com/list/surrealdb-deep-dive-ddefbefaf1ef
  ☐ learn terminusdb
    - https://terminusdb.com/blog/terminusdb-internals/
  ☐ keyboard shortcut to save/load buffer
  ☐ persist buffer to file
  ☐ load buffer to file
  ☐ persist buffer to surrealdb
  ☐ load buffer to surrealdb

framework:
  ☐ animation
    - https://github.com/SergioBenitez/Rocket/discussions/1735#discussioncomment-941576
    - https://notado.substack.com/p/do-you-really-need-a-message-queue?sd=pf
    - https://github.com/smallnest/concurrency-programming-via-rust
  ☐ [Filter unsupported graphemes in keypress](https://github.com/r3bl-org/r3bl_rs_utils/issues/26)
  
testing:
  ☐ Write integration test w/ input simulation using [enigo](https://github.com/enigo-rs/enigo)
    - eg: https://github.com/enigo-rs/enigo/blob/master/examples/keyboard.rs
  ☐ [Write tests: rendering, component, etc](https://github.com/r3bl-org/r3bl_rs_utils/issues?q=is%3Aissue+is%3Aopen+label%3Atesting)

cmdr:
  ☐ [Create PRD](https://github.com/r3bl-org/r3bl_rs_utils/issues/39)
    
writing:
  ☐ [RSX & DSL articles](https://github.com/r3bl-org/r3bl_rs_utils/issues/19)
  ☐ [Update DD for editor component](https://github.com/r3bl-org/r3bl_rs_utils/issues/23)
  ☐ [Write DD for render pipeline & paint](https://github.com/r3bl-org/r3bl_rs_utils/issues/37)
  ☐ [Write DD for tui module](https://github.com/r3bl-org/r3bl_rs_utils/issues/41)
  ☐ [Write coding pattern article on OOP -> Rust](https://gist.github.com/nazmulidris/f975795b98bc4573d6a0fb1e9bcca090#no-oop-in-rust)
