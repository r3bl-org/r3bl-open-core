┏━━━━━━━━━━━━━━━┓
┃ r3bl_rs_utils ┃
┛               ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
auto completion provider impl:
  **tracking bug**:
  ✔ [x] https://github.com/r3bl-org/r3bl_rs_utils/issues/49 @done(23-01-09 15:57)
  **bug fixes**:
  - [x] https://github.com/r3bl-org/r3bl_rs_utils/issues/71

  **dialog_engine_api.rs**:
  - [x] add `render_results_panel()` to display results panel (if in autocomplete mode)
    - `DialogBuffer.results` is saved in the **state** & gets passed in here
    - paint the `results: Vec<String>` in the panel
    - paint the selected row
    - deal w/ `scroll_offset_row_index`
  - [x] `apply_event()` - called by `DialogComponent::handle_event()`
    - [x] up / down handler to navigate the results panel (if in autocomplete mode)
      - up / down will change the following in the `dialog_engine` data (**not state**)
        - `selected_row_index` - tracks the selected row
          - used for `render`, `on_dialog_press_handler`
        - `scroll_offset_row_index` - tracks scroll offset
          - you can get viewport from `DialogEngine::flex_box`, saved by `DialogComponent::render()`
          - if viewport is smaller than num results then scroll offset is applied
      - this code path should return an `ConsumedRender` so that the results panel is re-rendered
    - [x] clean up engine data (`selected_row_index`, `scroll_offset_row_index`) when dialog is closed
  - [x] `render_engine()` - called by `DialogComponent::render()`
    - [x] called `render_results_panel()`
    - [x] actually call `make_flex_box_for_dialog()`
      - [x] drop the `current_box` arg
      - [x] pass the mode (`self.dialog_engine.dialog_options.mode`) into `make_flex_box_for_dialog()`
        - this `flex_box` is used later by the `DialogEngineApi::apply_event()` to perform scrolling
      - [x] save flex box to `dialog_engine.maybe_flex_box`
  - [x] `make_flex_box_for_dialog()`
    - [x] pass arg into the function
      - `DialogEngineMode` - this is the mode of the dialog engine (normal or autocomplete)
    - [x] make the `Surface` arg optional (since it won't be passed in)
    - [x] this should just be a private function, in `internal_impl`, remove from `DialogEngineApi`
    - [x] pass `SurfaceBounds` so that dialog paint can be constrained to this
    - [x] based on the mode (normal / autocomplete) generate the correct flex box
    - [x] write tests

  **dialog_buffer.rs**:
  - [x] add `maybe_results: Option<Vec<String>>` field

  **dialog_engine.rs**:
  - [x] add `selected_row_index: ChUnit`
  - [x] add `scroll_offset_row_index: ChUnit`
  - [x] add `maybe_flex_box: Option<FlexBox>` & document it
  - [x] add `reset()` and extend `Component` trait to have it as well & make sure others call it
    - [x] `dialog_engine_api.rs::apply_event()`
    - [x] `app.rs::try_input_event_activate_modal()`

  **app.rs**:
  - [x] add a new dialog component w/ autocomplete (copy `insert_dialog_component()`)
    - [x] new `ComponentId` called `AutocompleteDialog` (rename the old one to `SimpleDialog`)
    - [x] `on_dialog_press_handler` - add result to editor by dispatching action
    - [x] `on_dialog_editor_change_handler` -
      - [x] generate fake results
      - [x] dispatch action to update results panel
        - the results are added to `Action::SetDialogBufferResults(FlexBoxId, Vec<String>`
  - [x] add new keyboard shortcut to show autocomplete dialog (<kbd>ctrl + k</kbd>)
    - [x] change `try_input_event_activate_modal()`
    - [x] change status bar to show this shortcut
  - [x] `ContainerSurfaceRender::render_in_surface()` can't call `make_flex_box_for_dialog()`
    - Pass in `Default::default()` knowing that it will be ignored by the dialog component

  **reducer.rs**:
  - [x] add `Action::SetDialogBufferResultsPanel`
  - [x] handle `SetDialogBufferResultsPanel(FlexBoxId, Vec<String>` case in `run()`
    - add the results to the state (in `DialogBuffer`)

  **dialog_component.rs**:
  - [x] `render()` - ignore the 3rd arg (`current_box: FlexBox`) & document it
  - [x] `new_shared()` - add `DialogEngineConfigOptions` arg
  - [x] `new()` - add `DialogEngineConfigOptions` arg & save to `self.dialog_engine: DialogEngine`

  **style.rs**:
  - [x] replace id from String to u8 for performance benefit & Copy trait derive

editor engine bug:
  ✔ fix: type few lines, press backspace/delete (from end of file) and deleted lines are not removed @done(22-11-28 18:18)
    - paint.rs::paint() does not work property ... the optimization to prevent flicker causes this problem
    - this will be fixed by the compositor work!
    - this is also fixed by printing SPACERs in empty lines of the editor component
    - SHA: https://github.com/r3bl-org/r3bl_rs_utils/commit/e1c6b6b87de0b06ee1f634c72b547bf792d012a7

compositor:
  ✔ implement `render_pipeline_to_offscreen_buffer::RenderPipeline` to IR (`OffscreenBuffer`): @done(22-11-26 10:13)
    ✔ test `RenderPipeline::convert()` @done(22-11-26 14:40)
    ✔ implement ANSI text clipping & padding in `RenderPipeline::print_text_with_attributes()` @done(22-11-28 11:54)
  ✔ test `RenderPipeline::convert()` (offscreen_buffer.rs) @done(22-11-28 11:55)
    ✔ plain text @done(22-11-26 15:29)
    ✔ ANSI text @done(22-11-28 11:55)
    ✔ convert w/ 2 lines and position that isn't (0,0) @done(22-11-27 10:33)
  ✔ implement `OffscreenBufferPaintImplCrossterm` @done(22-11-28 15:18)
    ✔ implement `render()` & test @done(22-11-26 10:13)
    ✔ implement `paint()` @done(22-11-28 15:18)
    ✔ try it out w/ `compositor = true` in `paint.rs` @done(22-11-30 22:19)
  ✔ 🐛bugs: @done(22-12-02 19:04)
    ✔ window_size: [width:76, height:10] w/ editor eg doesn't display ` Ctrl + l : Modal dialog📣` @done(22-11-30 22:18)
    ✔ modal dialog looks distorted, `print_ansi_text` has problems @done(22-12-02 19:04)
  ✔ make offscreen buffer support serde @done(22-12-03 10:09)
  ✔ impl diff between 2 offscreen buffers & paint only the changes pixel chars @done(22-12-03 19:22)
    ✔ make sure it works, tests? @done(22-12-03 19:22)
  ✔ fix bug in example w/ 2 col layout that has text missing @done(22-12-04 13:45)
  ✔ fix things are being clipped twice (once during `convert`, and again on `render_op_impl`) @done(22-12-05 10:23)
      ✔ create a new "dumb" `RenderOp::CompositorNoClipTruncPrintTextWithAttributes` which does NOT handle clipping & padding @done(22-12-05 10:26)
      ✔ use this in `OffscreenBufferPaintImplCrossterm::render()` & `render_diff()` @done(22-12-05 10:26)
  ✔ cleanup @done(22-12-05 10:27)
    ✔ audit the use of `RwLock` for `main_event_loop::GlobalData` @done(22-12-05 10:11)
  ✔ deprecate: @done(22-12-05 17:58)
    ✔ `main_event_loop::GlobalData::cursor_position` @done(22-12-05 17:07)
    ✔ `RenderOp::CursorShow`, `CursorHide` @done(22-12-05 17:07)
    ✔ `RenderOp::RequestShowCaretAtPositionAbs`, `RequestShowCaretAtPositionRelTo` @done(22-12-05 17:07)
    ✔ `RenderOp::PrintTextWithAttributesAndPadding` @done(22-12-05 17:57)
    ✔ editor component should no longer pad empty lines w/ spaces thanks to compositor @done(22-12-05 17:57)
  ✔ bug: @done(22-12-08 19:06)
    ✔ fix log output so it is readable @done(22-12-06 12:24)
    ✔ scrolling this causes issues `# this is a line of x vars monk to y barf cook team by z bark mint🙏🏽😀░` @done(22-12-08 15:43)
    ✔ fix right at end of line not working @done(22-12-08 19:06)
  ✔ fix all broken tests @done(22-12-08 19:22)
  ✔ fix scrolling left bugs for window_size: [width:81, height:13] @done(22-12-10 11:27)
  ✔ update docs @done(22-12-11 10:15)
    ✔ put the docs where they belong (in the code): EditorBuffer w/ info on caret & scroll offset @done(22-12-09 15:31)
    ✔ update `dd_compositor.md` - talk about `paint.rs`, offscreen buffer, no flicker, no need to pad w/ spaces @done(22-12-09 19:54)
    ✔ add figma diagram showing how the compositor works @done(22-12-09 19:54)
    ✔ add docs for 2 scripts: `run-with-flamegraph-profiling.fish` & `run-with-crash-reporting.fish` @done(22-12-10 11:27)
    ✔ remove all the TODO:, BUG:, BM:, TK: from changes made in this branch @done(22-12-11 10:15)
  ✔ merge `compositor` branch into `main` & close issue https://github.com/r3bl-org/r3bl_rs_utils/issues/46 @done(22-12-10 11:27)
  ✔ cut releases & publish to crates.io @done(22-12-11 10:15)
  ✔ make a video & publicize it on reddit @done(22-12-11 10:15)

refactor https://github.com/r3bl-org/r3bl_rs_utils/issues/63:
  ✔ index (starts at 0) vs size (starts at 1) confusion cleanup @done(22-11-21 08:40)
  ✔ move get_plain_text_clipped() to access.rs @done(22-11-21 08:40)

editor engine extras core (https://github.com/r3bl-org/r3bl_rs_utils/issues/48): 
  ✔ syntax highlighting support @done(22-11-20 17:41)
  ✔ support editor config options to enable/disable syntax highlighting & update tests @done(22-11-20 17:41)
  ✔ markdown parsing (MD frontmatter in JSON format, and MD -> AST) @done(22-11-20 17:41)

cleanup:
  ✔ handle style local is true @done(22-10-30 19:31)
  ✔ rename jsx macro names (layout and render macros) @done(22-10-30 19:31)

editor engine extras (core):
  ✔ add modal dialog support https://github.com/r3bl-org/r3bl_rs_utils/issues/45 @done(22-10-28 16:08)

editor engine extras (core):
  ✔ add editor config options to enable/disable multiline & update tests @done(22-10-11 15:29)
  ✔ Expose clear `EditorEngineApi` public API for editor engine & remove OOP from engine @done(22-10-12 11:39)
  ✔ make sure window_size is correctly passed down from main_event_loop -> app -> component @done(22-10-17 11:13)

framework:
  ✔ [Enforce terminal window bounds in RenderPipeline](https://github.com/r3bl-org/r3bl_rs_utils/issues/28) @done(22-09-03 20:36)
  ✔ [Z-ordering support in RenderPipeline](https://github.com/r3bl-org/r3bl_rs_utils/issues/27) @done(22-09-09 16:12)
  ✔ [Fix broken unicode painting on different terminal + os combos](https://github.com/r3bl-org/r3bl_rs_utils/issues/33) @done(22-09-15 15:55)
  ✔ [EditorBuffer rewrite](https://github.com/r3bl-org/r3bl_rs_utils/issues/40) @done(22-09-20 10:32)
  ✔ [Migrate cmdr -> rs](https://github.com/r3bl-org/r3bl_rs_utils/issues/38) @done(22-09-20 13:59)

crate reorg (https://github.com/r3bl-org/r3bl_rs_utils/issues/42):
  ✔ Move tests from tests/ into appropriate src/ module @done(22-10-04 09:21)
    ✔ r3bl_rs_utils_core @done(22-10-04 09:21)
    ✔ r3bl_rs_utils_macro @done(22-10-04 09:21)
    ✔ r3bl_rs_utils @done(22-10-04 09:21)
  ✔ Break up r3bl_rs_utils into smaller crates @done(22-10-04 13:52)
    ✔ r3bl-redux @done(22-10-04 12:15)
    ✔ r3bl-tui @done(22-10-04 12:15)
    ✔ update all comments / docs @done(22-10-04 12:15)
    ✔ update all READMEs & lib.rs docs @done(22-10-04 13:52)

editor engine core (https://github.com/r3bl-org/r3bl_rs_utils/issues/23):
  ✔ wire up the engine into framework @done(22-08-31 13:56)
  ✔ fancy debug impl for editor buffer @done(22-08-31 13:57)
  ✔ insert content: @done(22-09-01 11:46)
    ✔ type characters & store in buffer @done(22-09-01 11:46)
    ✔ add tests for editor buffer @done(22-09-01 11:46)
  ✔ paint caret: @done(22-09-02 09:43)
    ✔ use cursor show / hide @done(22-09-02 08:19)
    ✔ use reverse / invert colors to paint the caret (so there can be many) @done(22-09-02 09:42)
    ✔ bounds check max rows when painting content @done(22-09-02 11:29)
  ✔ implement render clipping: @done(22-09-02 13:10)
    ✔ figure out how to incorporate row & col bounds checking to implement clipping @done(22-09-02 13:10)
  ✔ move cursor left, right: @done(22-09-12 09:49)
    ✔ move cursor left @done(22-09-09 16:02)
    ✔ move cursor right @done(22-09-09 16:02)
    ✔ write tests @done(22-09-12 09:49)
  ✔ refactor @done(22-09-12 09:50)
    ✔ replace `UnitType` w/ `ChUnit` and `ch!` macro @done(22-09-12 09:50)
  ✔ insert content: @done(22-09-12 16:06)
    ✔ handle new line insert at start, middle, end of current line @done(22-09-12 16:06)
    ✔ write tests @done(22-09-12 16:06)
  ✔ move cursor up, down: @done(22-09-13 11:47)
    ✔ up arrow key move in buffer @done(22-09-13 11:08)
    ✔ down arrow key move in buffer @done(22-09-13 11:08)
    ✔ write tests @done(22-09-13 11:47)
  ✔ delete content: @done(22-09-15 10:17)
    ✔ delete @done(22-09-14 15:46)
    ✔ backspace @done(22-09-14 15:46)
    ✔ write tests @done(22-09-17 13:48)
  ✔ write tests for `ch!` macro @done(22-09-17 13:55)
  ✔ start writing tests for render pipeline @done(22-09-17 14:43)
  ✔ scrolling @done(22-10-01 16:15)
    ✔ refactor editor buffer lines write ops so they are funnelled through a single fn @done(22-09-19 16:17)
    ✔ refactor editor buffer caret write ops so they are funnelled through a single fn @done(22-09-19 16:17)
    ✔ up, down @done(22-09-28 11:07)
    ✔ resize (caret & scroll fix - `validate_caret_in_viewport_activate_scroll_if_needed` in `render`) @done(22-09-28 13:12)
    ✔ left, right @done(22-10-01 16:15)
  ✔ move caret left, right -> move up, down as well @done(22-10-03 08:56)
    ✔ right at end of line, move down to start of next line @done(22-10-02 12:16)
    ✔ left at start of line, move up to end of previous line @done(22-10-02 12:16)
    ✔ down on last line, move to end of line @done(22-10-02 15:22)
    ✔ up at first line, move to 0,0 @done(22-10-03 08:56)
  ✔ other key inputs @done(22-10-03 11:22)
    ✔ home/end @done(22-10-03 09:24)
    ✔ page up/down @done(22-10-03 11:22)
  ✔ tests for page up, down @done(22-10-03 12:08)
  ✔ add docs for viewport & scrolling in editor_ops.rs @done(22-10-03 12:16)
  ✔ tests for scrolling @done(22-10-03 15:44)

styling - add text span support:
  ✔ add new struct to provide text span which is vec of styled text `styled_text.rs` @done(22-08-13 20:18)
  ✔ ensure that its compatible w/ `GraphemeClusterSegment` & `unicode_string_ext.rs` @done(22-08-13 20:18)
  ✔ add unicode width to `GraphemeClusterSegment` @done(22-08-13 20:18)
  ✔ impl this for the exit message in `r3bl-cmdr` @done(22-08-13 20:18)

cleanup:
  ✔ replace all use of crossterm `Color` w/ `TuiColor` (provide `From` trait impl) @done(22-08-14 14:50)
  ✔ clean up all existing code & try to move things to inner `helpers` mod @done(22-08-14 14:50)

build awareness:
  ✔ write tutorial on developerlife.com about `style!` DSL @done(22-08-05 17:11)
    - part 1 of a series on creating CSS like DSL in Rust
    - plan to add JSX like DSL in Rust as well for `tui` module
  
share this w/ the community:
  ✔ rust lang community forum @done(22-08-06 20:13)
  ✔ discord server for rust `proc-macro` & `tui-and-cli` @done(22-08-06 20:13)
  ✔ r/rust @done(22-08-06 20:13)
  ✔ mailchimp @done(22-08-06 20:13)

publish:
  ✔ core needs to be rev'd @done(22-08-04 11:14)
  ✔ public needs to be rev'd @done(22-08-04 11:14)
  ✔ README needs to be rev'd @done(22-08-04 11:14)

tui graduate:
  ✔ move all the `tui` stuff out of `r3bl-cmdr` into here @done(22-08-02 15:04)
  ✔ fix `cargo doc` warnings in `r3bl_rs_utils` @done(22-08-03 10:11)
  ✔ add simple README & lib.rs doc for `core` crate @done(22-08-03 12:34)
  ✔ add simple README & lib.rs doc for `macro` crate @done(22-08-03 12:34)
  ✔ add documentation for `tui` module @done(22-08-03 14:54)
  ✔ add documentation for `tui_core` module @done(22-08-03 14:55)
  ✔ match redux docs from README to mod.rs @done(22-08-03 15:18)
  ✔ match tui docs from mod.rs to README @done(22-08-03 15:31)

move `tui-core` from `r3bl-cmdr` here:
  ✔ add `tui-core` to `core` @done(22-07-05 16:19)
  ✔ make this work w/ the `style!` macro @done(22-07-05 16:19)

add `style!` proc macro:
  ✔ impl attrib (bold, dim, etc) @done(22-07-05 16:19)
  ✔ make this work w/ the real `Style` struct (update test below) @done(22-07-05 19:51)
  ✔ impl margin @done(22-07-07 13:22)
  ✔ impl color_fg @done(22-07-07 13:22)
  ✔ impl color_bg @done(22-07-07 13:22)

test_make_style_macro.rs:
  ✔ use the real `Style` struct (not the fake one) @done(22-07-07 13:22)

publish:
  ✔ rev `core` version & publish (`tui-core`) @done(22-07-07 13:22)
  ✔ rev `macro` version & publish @done(22-07-07 13:22)
  ✔ rev main version @done(22-07-07 13:22)
  ✔ update `README.md` (run `doctoc`) @done(22-07-07 13:22)
  ✔ publish `public` version @done(22-07-07 13:22)

move `tui` from `r3bl-cmdr` here:
  ✔ move the `tui` folder here when it is ready @done(22-07-07 13:22)
  ✔ move the tests here @done(22-07-07 13:22)
  ✔ update README.md @done(22-07-07 13:22)
  ✔ rev the public version & publish @done(22-07-07 13:22)

Simplify mw:
  ✔ no longer returns `Option<Action>` @done(22-04-19 16:35)
  ✔ be opinionated about parallel execution @done(22-04-19 16:35)
    - via `fire_and_forget!`
    - dispatch an `Action` afterwards
    - in a separate tokio thread
Rewrite subscriber to use async trait:
  ✔ async trait @done(22-04-17 18:22)

Rewrite mw to use async trait:
  ✔ add async trait in `async_middleware.rs` @done(22-04-15 19:31)
  ✔ add async trait vec in `async_middleware.rs` @done(22-04-15 19:31)
  ✔ add methods in `async_store.rs` to add/remove middleware async trait @done(22-04-15 19:31)
  ✔ add method in `async_store_state_machine.rs` to run the trait objs in `middleware_vec` @done(22-04-16 19:12)

Fix middleware & make it async:
  ✔ mw fn accepts 2nd arg (`StoreStateMachine`) so it can dispatch action async @done(22-04-13 17:49)

Cyclic arc in Rust 1.60.0:
  ✔ Experiment use new cyclic `Arc` in `<Arc<RwLock<T>>>` pattern @done(22-04-08 11:32)
    - `arc_cyclic_test.rs`
    - `arc_cyclic_test_2.rs`
  ✔ Can't use it in proc macro @done(22-04-08 11:33)
    - `from` constructor provides an `Arc` wrapped struct & fails to hide the `Arc`

Bug fixes:
  ✔ separate `TypeExt` into 2 smaller traits @done(22-04-07 11:02)
  ✔ remove helper function redundancy between following proc macros: @started(22-04-07 15:51) @done(22-04-07 15:51) @lasted(41s)
    - `make_shareable_fn_wrapper.rs`
    - `make_safe_async_fn_wrapper.rs`
  ✔ clean up `type_ext.rs` @done(22-04-07 15:52)
  ✔ publish public 0.7.7 and macro 0.7.2 @done(22-04-07 16:08)

Experiment:
  ✔ make a macro that can generate the complex function wrapper struct @done(22-04-02 20:17)
  ✔ Replace async_subscribers.rs and async_middleware.rs w/ new macro @done(22-04-02 20:17)
  ✔ publish v0.7.1 and update all the internal deps to v0.7.1 @done(22-04-02 20:24)

README:
  ✔ decl: add debug! macro docs @done(22-04-01 21:03)
  ✔ proc-derive: add builder.rs docs @done(22-04-01 21:03)
  ✔ proc-fn-like: add manager-of-things proc macro fn docs @done(22-04-01 21:03)
  ✔ Publish a new version to crates.io @done(22-04-01 22:10)
  ✔ developerlife.com update Rust & Redux article @done(22-04-01 22:10)

use the macros:
  ✔ Identify where the new proc macro "manager" of "things" can be used @done(22-04-01 15:03)
  ✔ Refactor existing Redux code to use macros above @done(22-04-01 15:03)
  ✔ sync_reducer.rs @done(22-04-01 20:26)
  ✔ async_middleware.rs @done(22-04-01 20:46)
  ✔ async_subscriber.rs @done(22-04-01 20:46)

r3bl_rs_utils:
  ✔ Extract 2 traits out of manager_of_things.rs & rename the macro @done(22-04-01 07:41)
  ✔ Create my_core_lib crate @done(22-04-01 10:41)
  ✔ Add my_core_lib crate as dep for: @done(22-04-01 10:42)
    ✔ public crate (r3bl_rs_utils), @done(22-04-01 10:42)
    ✔ proc macro crate (my_proc_macros_lib) @done(22-04-01 10:42)
  ✔ Move the 2 core traits into my_core_lib crate @done(22-04-01 10:42)

developerlife.com content:
  ✔ Update articles on Redux and Proc Macros w/ this new stuff @done(22-03-31 20:06)

manager_of_things.rs:
  ✔ Based on macros repo create the final "manager" of "things" fn like macro @done(22-03-31 18:41)

builder.rs:
  ✔ copy from macros repo to here @done(22-03-31 15:00)
  ✔ update lib.rs to export it @done(22-03-31 15:00)

proc macros setup:
  ✔ make lib crate for proc macro @done(22-03-31 11:33)
  ✔ make lib.rs file and setup directory layout @done(22-03-31 11:33)
  ✔ link this lib to the main crate's Cargo.toml @done(22-03-31 11:33)
  ✔ make manager-of-things.rs file and export it via lib.rs @done(22-03-31 11:33)

decl macros:
  ✔ Move from macros repo debug! decl macro @done(22-03-31 10:19)

Add new functions from other repos:
  ✔ Add `file_logging.rs` from `tui-layout-crossterm` @done(22-04-28 17:01)
  ✔ Update `README.md` w/ `log!` macro @done(22-04-29 12:28)
  ✔ Update `README.md` w/ `make_api_call_for!` macro @done(22-04-29 14:58)
  ✔ Update `README.md` w/ `fire_and_forget!` macro @done(22-04-29 14:58)
  ✔ Publish 0.7.21 @done(22-04-29 14:59)
